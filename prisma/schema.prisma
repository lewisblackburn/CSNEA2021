datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../packages/backend/src/generated/type-graphql"
}

model User {
  id            Int            @id @default(autoincrement())
  confirmed     Boolean        @default(false)
  email         String         @unique
  username      String         @unique
  displayname   String
  /// @TypeGraphQL.omit(output: true)
  password      String
  role          Role           @default(USER)
  avatar        String         @default(value: "https://via.placeholder.com/400x400")
  bio           String         @default(value: "")
  location      String         @default(value: "")
  website       String         @default(value: "")
  dob           String         @default(value: "")
  following     Follows[]      @relation(name: "following")
  followers     Follows[]      @relation(name: "follower")
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Follows {
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int

  @@id([followerId, followingId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Person {
  id        Int            @id @default(autoincrement())
  career    Career[]
  name      String
  thumbnail String         @default(value: "https://via.placeholder.com/400x600")
  bio       String?
  age       Int?
  movies    ActorInMovie[]
  shows     ActorInShow[]
  books     Book[]
  songs     Song[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Movie {
  id          Int               @id @default(autoincrement())
  title       String
  description String
  thumbnail   String            @default(value: "https://via.placeholder.com/400x600")
  locked      Boolean           @default(false)
  released    DateTime?
  actors      ActorInMovie[]
  platforms   PlatformOnMovie[]
  soundtrack  SongInMovie[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Show {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  thumbnail   String           @default(value: "https://via.placeholder.com/400x600")
  locked      Boolean          @default(false)
  released    DateTime?
  actors      ActorInShow[]
  platforms   PlatformOnShow[]
  soundtrack  SongInShow[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Platform {
  id              Int               @id @default(autoincrement())
  name            String
  PlatformOnMovie PlatformOnMovie[]
  PlatformOnShow  PlatformOnShow[]
}

model PlatformOnMovie {
  price      String
  platform   Platform @relation(fields: [platformId], references: [id])
  platformId Int
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    Int

  @@id([platformId, movieId])
}

model PlatformOnShow {
  price      String
  platform   Platform @relation(fields: [platformId], references: [id])
  platformId Int
  show       Show     @relation(fields: [showId], references: [id])
  showId     Int

  @@id([platformId, showId])
}

model SongInMovie {
  timestamp   DateTime
  description String
  song        Song     @relation(fields: [songId], references: [id])
  songId      Int
  movie       Movie    @relation(fields: [movieId], references: [id])
  movieId     Int

  @@id([songId, movieId])
}

model SongInShow {
  timestamp   DateTime
  description String
  song        Song     @relation(fields: [songId], references: [id])
  songId      Int
  show        Show     @relation(fields: [showId], references: [id])
  showId      Int

  @@id([songId, showId])
}

model ActorInMovie {
  movie    Movie  @relation(fields: [movieId], references: [id])
  movieId  Int
  person   Person @relation(fields: [personId], references: [id])
  personId Int
  role     String

  @@id([personId, movieId])
}

model ActorInShow {
  show     Show   @relation(fields: [showId], references: [id])
  showId   Int
  person   Person @relation(fields: [personId], references: [id])
  personId Int
  role     String

  @@id([personId, showId])
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  thumbnail   String    @default(value: "https://via.placeholder.com/400x600")
  locked      Boolean   @default(false)
  released    DateTime?
  authors     Person[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Song {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  thumbnail   String        @default(value: "https://via.placeholder.com/400x600")
  locked      Boolean       @default(false)
  released    DateTime?
  artists     Person[]
  songInShow  SongInShow[]
  songInMovie SongInMovie[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Career {
  AUTHOR
  ARTIST
  ACTOR
}

enum Role {
  USER
  ADMIN
}
