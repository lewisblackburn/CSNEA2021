/// Throughout the following code, I use the following notation:
/// @TypeGraphQL.omit(output: true, input: false) -> input is generated but not output (except for the password field)
/// This means that the field is not included in the output or input types of the generated files.
/// It will mostly be used for fields that are not part of the public API of the type.
/// Such as internal fields used for implementation details e.g password and the user (ctx.req.session.userId) field.

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../packages/backend/src/generated/type-graphql"
}

model User {
  id                Int               @id @default(autoincrement())
  confirmed         Boolean           @default(false)
  email             String            @unique
  username          String            @unique
  displayname       String
  /// @TypeGraphQL.omit(output: true, input: true)
  password          String
  role              Role              @default(USER)
  avatar            String            @default(value: "https://via.placeholder.com/400x400")
  bio               String            @default(value: "")
  location          String            @default(value: "")
  website           String            @default(value: "")
  dob               DateTime          @default(now())
  following         Follows[]         @relation(name: "following")
  followers         Follows[]         @relation(name: "follower")
  notifications     Notification[]
  watchlist         Watchlist?
  likedMovies       MovieLike[]
  likedShows        ShowLike[]
  likedSongs        SongLike[]
  likedBooks        BookLike[]
  movieReviews      MovieReview[]
  likedMovieReviews MovieReviewLike[]
  showReviews       ShowReview[]
  showReviewLikes   ShowReviewLike[]
  bookReviews       BookReview[]
  bookReviewLikes   BookReviewLike[]
  songReviews       SongReview[]
  songReviewLikes   SongReviewLike[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Follows {
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Watchlist {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  movies Movie[]
  shows  Show[]

  createdAt DateTime @default(now())
}

model Person {
  id        Int            @id @default(autoincrement())
  career    Career[]
  name      String
  poster    String         @default(value: "https://via.placeholder.com/400x600")
  locked    Boolean        @default(false)
  bio       String?
  age       Int?
  movies    ActorInMovie[]
  shows     ActorInShow[]
  books     AuthorInBook[]
  songs     ArtistInSong[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Movie {
  id         Int            @id @default(autoincrement())
  title      String
  tagline    String
  overview   String
  poster     String         @default(value: "https://via.placeholder.com/400x600")
  backdrop   String         @default(value: "https://via.placeholder.com/1200x600")
  locked     Boolean        @default(false)
  released   DateTime?
  runtime    Float?
  trailer    String?
  rating     String? // age rating of the movie
  actors     ActorInMovie[]
  genres     Genre[]
  platforms  Platform[]
  soundtrack SongInMovie[]
  watchlist  Watchlist[]
  reviews    MovieReview[] // collective rating will come from rating in reviews
  likes      MovieLike[]
  updatedAt  DateTime       @updatedAt
  createdAt  DateTime       @default(now())
}

model Show {
  id         Int           @id @default(autoincrement())
  title      String
  tagline    String
  overview   String
  poster     String        @default(value: "https://via.placeholder.com/400x600")
  backdrop   String        @default(value: "https://via.placeholder.com/1200x600")
  locked     Boolean       @default(false)
  released   DateTime?
  runtime    Float?
  trailer    String?
  rating     String?
  actors     ActorInShow[]
  genres     Genre[]
  platforms  Platform[]
  soundtrack SongInShow[]
  watchlist  Watchlist[]
  reviews    ShowReview[]
  likes      ShowLike[]
  updatedAt  DateTime      @updatedAt
  createdAt  DateTime      @default(now())
}

model Platform {
  id     Int     @id @default(autoincrement())
  name   String
  apiKey String
  shows  Show[]
  movies Movie[]
}

model SongInMovie {
  timestamp   DateTime
  description String
  song        Song     @relation(fields: [songId], references: [id])
  songId      Int
  movie       Movie    @relation(fields: [movieId], references: [id])
  movieId     Int

  @@id([songId, movieId])
}

model SongInShow {
  timestamp   DateTime
  description String
  song        Song     @relation(fields: [songId], references: [id])
  songId      Int
  show        Show     @relation(fields: [showId], references: [id])
  showId      Int

  @@id([songId, showId])
}

model ActorInMovie {
  movie    Movie  @relation(fields: [movieId], references: [id])
  movieId  Int
  person   Person @relation(fields: [personId], references: [id])
  personId Int
  role     String

  @@id([personId, movieId])
}

model ActorInShow {
  show     Show   @relation(fields: [showId], references: [id])
  showId   Int
  person   Person @relation(fields: [personId], references: [id])
  personId Int
  role     String

  @@id([personId, showId])
}

model Book {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  poster      String         @default(value: "https://via.placeholder.com/400x600")
  locked      Boolean        @default(false)
  released    DateTime?
  authors     AuthorInBook[]
  genres      Genre[]
  reviews     BookReview[]
  likes       BookLike[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Song {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  poster      String         @default(value: "https://via.placeholder.com/400x600")
  locked      Boolean        @default(false)
  released    DateTime?
  runtime     Float?
  artists     ArtistInSong[]
  songInShow  SongInShow[]
  songInMovie SongInMovie[]
  genres      Genre[]
  reviews     SongReview[]
  likes       SongLike[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model AuthorInBook {
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  person    Person   @relation(fields: [personId], references: [id])
  personId  Int
  createdAt DateTime @default(now())

  @@id([personId, bookId])
}

model ArtistInSong {
  song      Song     @relation(fields: [songId], references: [id])
  songId    Int
  person    Person   @relation(fields: [personId], references: [id])
  personId  Int
  createdAt DateTime @default(now())

  @@id([personId, songId])
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String
  movies Movie[]
  shows  Show[]
  songs  Song[]
  books  Book[]
}

model MovieLike {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())

  @@id([userId, movieId])
}

model ShowLike {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  show      Show     @relation(fields: [showId], references: [id])
  showId    Int
  createdAt DateTime @default(now())

  @@id([userId, showId])
}

model SongLike {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  song      Song     @relation(fields: [songId], references: [id])
  songId    Int
  createdAt DateTime @default(now())

  @@id([userId, songId])
}

model BookLike {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  createdAt DateTime @default(now())

  @@id([userId, bookId])
}

model MovieReview {
  // These will be blank for users who only want to rate the movie
  review String?
  rating Int
  likes  MovieReviewLike[]


  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([userId, movieId])
}

model MovieReviewLike {
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  reviewUserId  Int
  reviewMovieId Int
  movieReview   MovieReview @relation(fields: [reviewUserId, reviewMovieId], references: [userId, movieId])
  createdAt     DateTime    @default(now())

  @@id([userId, reviewUserId, reviewMovieId])
}

model ShowReview {
  review String?
  rating Int
  likes  ShowReviewLike[]

  user   User @relation(fields: [userId], references: [id])
  userId Int
  show   Show @relation(fields: [showId], references: [id])
  showId Int

  @@id([userId, showId])
}

model ShowReviewLike {
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  reviewUserId Int
  reviewShowId Int
  showReview   ShowReview @relation(fields: [reviewUserId, reviewShowId], references: [userId, showId])
  createdAt    DateTime   @default(now())

  @@id([userId, reviewUserId, reviewShowId])
}

model BookReview {
  review String?
  rating Int
  likes  BookReviewLike[]

  user   User @relation(fields: [userId], references: [id])
  userId Int
  book   Book @relation(fields: [bookId], references: [id])
  bookId Int

  @@id([userId, bookId])
}

model BookReviewLike {
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  reviewUserId Int
  reviewBookId Int
  bookReview   BookReview @relation(fields: [reviewUserId, reviewBookId], references: [userId, bookId])
  createdAt    DateTime   @default(now())

  @@id([userId, reviewUserId, reviewBookId])
}

model SongReview {
  review String?
  rating Int
  likes  SongReviewLike[]

  user   User @relation(fields: [userId], references: [id])
  userId Int
  song   Song @relation(fields: [songId], references: [id])
  songId Int

  @@id([userId, songId])
}

model SongReviewLike {
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  reviewUserId Int
  reviewSongId Int
  songReview   SongReview @relation(fields: [reviewUserId, reviewSongId], references: [userId, songId])
  createdAt    DateTime   @default(now())

  @@id([userId, reviewUserId, reviewSongId])
}

enum Career {
  AUTHOR
  ARTIST
  ACTOR
}

enum Role {
  USER
  ADMIN
}
