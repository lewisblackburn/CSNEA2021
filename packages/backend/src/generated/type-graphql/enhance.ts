import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

const crudResolversMap = {
  User: crudResolvers.UserCrudResolver,
  Follows: crudResolvers.FollowsCrudResolver,
  Notification: crudResolvers.NotificationCrudResolver,
  Watchlist: crudResolvers.WatchlistCrudResolver,
  Person: crudResolvers.PersonCrudResolver,
  Movie: crudResolvers.MovieCrudResolver,
  Show: crudResolvers.ShowCrudResolver,
  Platform: crudResolvers.PlatformCrudResolver,
  SongInMovie: crudResolvers.SongInMovieCrudResolver,
  SongInShow: crudResolvers.SongInShowCrudResolver,
  ActorInMovie: crudResolvers.ActorInMovieCrudResolver,
  ActorInShow: crudResolvers.ActorInShowCrudResolver,
  Book: crudResolvers.BookCrudResolver,
  Song: crudResolvers.SongCrudResolver,
  Genre: crudResolvers.GenreCrudResolver,
  MovieReview: crudResolvers.MovieReviewCrudResolver,
  MovieReviewLike: crudResolvers.MovieReviewLikeCrudResolver
};
const actionResolversMap = {
  User: {
    user: actionResolvers.FindUniqueUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    users: actionResolvers.FindManyUserResolver,
    createUser: actionResolvers.CreateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    deleteUser: actionResolvers.DeleteUserResolver,
    updateUser: actionResolvers.UpdateUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    upsertUser: actionResolvers.UpsertUserResolver,
    aggregateUser: actionResolvers.AggregateUserResolver,
    groupByUser: actionResolvers.GroupByUserResolver
  },
  Follows: {
    findUniqueFollows: actionResolvers.FindUniqueFollowsResolver,
    findFirstFollows: actionResolvers.FindFirstFollowsResolver,
    findManyFollows: actionResolvers.FindManyFollowsResolver,
    createFollows: actionResolvers.CreateFollowsResolver,
    createManyFollows: actionResolvers.CreateManyFollowsResolver,
    deleteFollows: actionResolvers.DeleteFollowsResolver,
    updateFollows: actionResolvers.UpdateFollowsResolver,
    deleteManyFollows: actionResolvers.DeleteManyFollowsResolver,
    updateManyFollows: actionResolvers.UpdateManyFollowsResolver,
    upsertFollows: actionResolvers.UpsertFollowsResolver,
    aggregateFollows: actionResolvers.AggregateFollowsResolver,
    groupByFollows: actionResolvers.GroupByFollowsResolver
  },
  Notification: {
    notification: actionResolvers.FindUniqueNotificationResolver,
    findFirstNotification: actionResolvers.FindFirstNotificationResolver,
    notifications: actionResolvers.FindManyNotificationResolver,
    createNotification: actionResolvers.CreateNotificationResolver,
    createManyNotification: actionResolvers.CreateManyNotificationResolver,
    deleteNotification: actionResolvers.DeleteNotificationResolver,
    updateNotification: actionResolvers.UpdateNotificationResolver,
    deleteManyNotification: actionResolvers.DeleteManyNotificationResolver,
    updateManyNotification: actionResolvers.UpdateManyNotificationResolver,
    upsertNotification: actionResolvers.UpsertNotificationResolver,
    aggregateNotification: actionResolvers.AggregateNotificationResolver,
    groupByNotification: actionResolvers.GroupByNotificationResolver
  },
  Watchlist: {
    watchlist: actionResolvers.FindUniqueWatchlistResolver,
    findFirstWatchlist: actionResolvers.FindFirstWatchlistResolver,
    watchlists: actionResolvers.FindManyWatchlistResolver,
    createWatchlist: actionResolvers.CreateWatchlistResolver,
    createManyWatchlist: actionResolvers.CreateManyWatchlistResolver,
    deleteWatchlist: actionResolvers.DeleteWatchlistResolver,
    updateWatchlist: actionResolvers.UpdateWatchlistResolver,
    deleteManyWatchlist: actionResolvers.DeleteManyWatchlistResolver,
    updateManyWatchlist: actionResolvers.UpdateManyWatchlistResolver,
    upsertWatchlist: actionResolvers.UpsertWatchlistResolver,
    aggregateWatchlist: actionResolvers.AggregateWatchlistResolver,
    groupByWatchlist: actionResolvers.GroupByWatchlistResolver
  },
  Person: {
    person: actionResolvers.FindUniquePersonResolver,
    findFirstPerson: actionResolvers.FindFirstPersonResolver,
    people: actionResolvers.FindManyPersonResolver,
    createPerson: actionResolvers.CreatePersonResolver,
    createManyPerson: actionResolvers.CreateManyPersonResolver,
    deletePerson: actionResolvers.DeletePersonResolver,
    updatePerson: actionResolvers.UpdatePersonResolver,
    deleteManyPerson: actionResolvers.DeleteManyPersonResolver,
    updateManyPerson: actionResolvers.UpdateManyPersonResolver,
    upsertPerson: actionResolvers.UpsertPersonResolver,
    aggregatePerson: actionResolvers.AggregatePersonResolver,
    groupByPerson: actionResolvers.GroupByPersonResolver
  },
  Movie: {
    movie: actionResolvers.FindUniqueMovieResolver,
    findFirstMovie: actionResolvers.FindFirstMovieResolver,
    movies: actionResolvers.FindManyMovieResolver,
    createMovie: actionResolvers.CreateMovieResolver,
    createManyMovie: actionResolvers.CreateManyMovieResolver,
    deleteMovie: actionResolvers.DeleteMovieResolver,
    updateMovie: actionResolvers.UpdateMovieResolver,
    deleteManyMovie: actionResolvers.DeleteManyMovieResolver,
    updateManyMovie: actionResolvers.UpdateManyMovieResolver,
    upsertMovie: actionResolvers.UpsertMovieResolver,
    aggregateMovie: actionResolvers.AggregateMovieResolver,
    groupByMovie: actionResolvers.GroupByMovieResolver
  },
  Show: {
    show: actionResolvers.FindUniqueShowResolver,
    findFirstShow: actionResolvers.FindFirstShowResolver,
    shows: actionResolvers.FindManyShowResolver,
    createShow: actionResolvers.CreateShowResolver,
    createManyShow: actionResolvers.CreateManyShowResolver,
    deleteShow: actionResolvers.DeleteShowResolver,
    updateShow: actionResolvers.UpdateShowResolver,
    deleteManyShow: actionResolvers.DeleteManyShowResolver,
    updateManyShow: actionResolvers.UpdateManyShowResolver,
    upsertShow: actionResolvers.UpsertShowResolver,
    aggregateShow: actionResolvers.AggregateShowResolver,
    groupByShow: actionResolvers.GroupByShowResolver
  },
  Platform: {
    platform: actionResolvers.FindUniquePlatformResolver,
    findFirstPlatform: actionResolvers.FindFirstPlatformResolver,
    platforms: actionResolvers.FindManyPlatformResolver,
    createPlatform: actionResolvers.CreatePlatformResolver,
    createManyPlatform: actionResolvers.CreateManyPlatformResolver,
    deletePlatform: actionResolvers.DeletePlatformResolver,
    updatePlatform: actionResolvers.UpdatePlatformResolver,
    deleteManyPlatform: actionResolvers.DeleteManyPlatformResolver,
    updateManyPlatform: actionResolvers.UpdateManyPlatformResolver,
    upsertPlatform: actionResolvers.UpsertPlatformResolver,
    aggregatePlatform: actionResolvers.AggregatePlatformResolver,
    groupByPlatform: actionResolvers.GroupByPlatformResolver
  },
  SongInMovie: {
    songInMovie: actionResolvers.FindUniqueSongInMovieResolver,
    findFirstSongInMovie: actionResolvers.FindFirstSongInMovieResolver,
    songInMovies: actionResolvers.FindManySongInMovieResolver,
    createSongInMovie: actionResolvers.CreateSongInMovieResolver,
    createManySongInMovie: actionResolvers.CreateManySongInMovieResolver,
    deleteSongInMovie: actionResolvers.DeleteSongInMovieResolver,
    updateSongInMovie: actionResolvers.UpdateSongInMovieResolver,
    deleteManySongInMovie: actionResolvers.DeleteManySongInMovieResolver,
    updateManySongInMovie: actionResolvers.UpdateManySongInMovieResolver,
    upsertSongInMovie: actionResolvers.UpsertSongInMovieResolver,
    aggregateSongInMovie: actionResolvers.AggregateSongInMovieResolver,
    groupBySongInMovie: actionResolvers.GroupBySongInMovieResolver
  },
  SongInShow: {
    songInShow: actionResolvers.FindUniqueSongInShowResolver,
    findFirstSongInShow: actionResolvers.FindFirstSongInShowResolver,
    songInShows: actionResolvers.FindManySongInShowResolver,
    createSongInShow: actionResolvers.CreateSongInShowResolver,
    createManySongInShow: actionResolvers.CreateManySongInShowResolver,
    deleteSongInShow: actionResolvers.DeleteSongInShowResolver,
    updateSongInShow: actionResolvers.UpdateSongInShowResolver,
    deleteManySongInShow: actionResolvers.DeleteManySongInShowResolver,
    updateManySongInShow: actionResolvers.UpdateManySongInShowResolver,
    upsertSongInShow: actionResolvers.UpsertSongInShowResolver,
    aggregateSongInShow: actionResolvers.AggregateSongInShowResolver,
    groupBySongInShow: actionResolvers.GroupBySongInShowResolver
  },
  ActorInMovie: {
    actorInMovie: actionResolvers.FindUniqueActorInMovieResolver,
    findFirstActorInMovie: actionResolvers.FindFirstActorInMovieResolver,
    actorInMovies: actionResolvers.FindManyActorInMovieResolver,
    createActorInMovie: actionResolvers.CreateActorInMovieResolver,
    createManyActorInMovie: actionResolvers.CreateManyActorInMovieResolver,
    deleteActorInMovie: actionResolvers.DeleteActorInMovieResolver,
    updateActorInMovie: actionResolvers.UpdateActorInMovieResolver,
    deleteManyActorInMovie: actionResolvers.DeleteManyActorInMovieResolver,
    updateManyActorInMovie: actionResolvers.UpdateManyActorInMovieResolver,
    upsertActorInMovie: actionResolvers.UpsertActorInMovieResolver,
    aggregateActorInMovie: actionResolvers.AggregateActorInMovieResolver,
    groupByActorInMovie: actionResolvers.GroupByActorInMovieResolver
  },
  ActorInShow: {
    actorInShow: actionResolvers.FindUniqueActorInShowResolver,
    findFirstActorInShow: actionResolvers.FindFirstActorInShowResolver,
    actorInShows: actionResolvers.FindManyActorInShowResolver,
    createActorInShow: actionResolvers.CreateActorInShowResolver,
    createManyActorInShow: actionResolvers.CreateManyActorInShowResolver,
    deleteActorInShow: actionResolvers.DeleteActorInShowResolver,
    updateActorInShow: actionResolvers.UpdateActorInShowResolver,
    deleteManyActorInShow: actionResolvers.DeleteManyActorInShowResolver,
    updateManyActorInShow: actionResolvers.UpdateManyActorInShowResolver,
    upsertActorInShow: actionResolvers.UpsertActorInShowResolver,
    aggregateActorInShow: actionResolvers.AggregateActorInShowResolver,
    groupByActorInShow: actionResolvers.GroupByActorInShowResolver
  },
  Book: {
    book: actionResolvers.FindUniqueBookResolver,
    findFirstBook: actionResolvers.FindFirstBookResolver,
    books: actionResolvers.FindManyBookResolver,
    createBook: actionResolvers.CreateBookResolver,
    createManyBook: actionResolvers.CreateManyBookResolver,
    deleteBook: actionResolvers.DeleteBookResolver,
    updateBook: actionResolvers.UpdateBookResolver,
    deleteManyBook: actionResolvers.DeleteManyBookResolver,
    updateManyBook: actionResolvers.UpdateManyBookResolver,
    upsertBook: actionResolvers.UpsertBookResolver,
    aggregateBook: actionResolvers.AggregateBookResolver,
    groupByBook: actionResolvers.GroupByBookResolver
  },
  Song: {
    song: actionResolvers.FindUniqueSongResolver,
    findFirstSong: actionResolvers.FindFirstSongResolver,
    songs: actionResolvers.FindManySongResolver,
    createSong: actionResolvers.CreateSongResolver,
    createManySong: actionResolvers.CreateManySongResolver,
    deleteSong: actionResolvers.DeleteSongResolver,
    updateSong: actionResolvers.UpdateSongResolver,
    deleteManySong: actionResolvers.DeleteManySongResolver,
    updateManySong: actionResolvers.UpdateManySongResolver,
    upsertSong: actionResolvers.UpsertSongResolver,
    aggregateSong: actionResolvers.AggregateSongResolver,
    groupBySong: actionResolvers.GroupBySongResolver
  },
  Genre: {
    genre: actionResolvers.FindUniqueGenreResolver,
    findFirstGenre: actionResolvers.FindFirstGenreResolver,
    genres: actionResolvers.FindManyGenreResolver,
    createGenre: actionResolvers.CreateGenreResolver,
    createManyGenre: actionResolvers.CreateManyGenreResolver,
    deleteGenre: actionResolvers.DeleteGenreResolver,
    updateGenre: actionResolvers.UpdateGenreResolver,
    deleteManyGenre: actionResolvers.DeleteManyGenreResolver,
    updateManyGenre: actionResolvers.UpdateManyGenreResolver,
    upsertGenre: actionResolvers.UpsertGenreResolver,
    aggregateGenre: actionResolvers.AggregateGenreResolver,
    groupByGenre: actionResolvers.GroupByGenreResolver
  },
  MovieReview: {
    movieReview: actionResolvers.FindUniqueMovieReviewResolver,
    findFirstMovieReview: actionResolvers.FindFirstMovieReviewResolver,
    movieReviews: actionResolvers.FindManyMovieReviewResolver,
    createMovieReview: actionResolvers.CreateMovieReviewResolver,
    createManyMovieReview: actionResolvers.CreateManyMovieReviewResolver,
    deleteMovieReview: actionResolvers.DeleteMovieReviewResolver,
    updateMovieReview: actionResolvers.UpdateMovieReviewResolver,
    deleteManyMovieReview: actionResolvers.DeleteManyMovieReviewResolver,
    updateManyMovieReview: actionResolvers.UpdateManyMovieReviewResolver,
    upsertMovieReview: actionResolvers.UpsertMovieReviewResolver,
    aggregateMovieReview: actionResolvers.AggregateMovieReviewResolver,
    groupByMovieReview: actionResolvers.GroupByMovieReviewResolver
  },
  MovieReviewLike: {
    movieReviewLike: actionResolvers.FindUniqueMovieReviewLikeResolver,
    findFirstMovieReviewLike: actionResolvers.FindFirstMovieReviewLikeResolver,
    movieReviewLikes: actionResolvers.FindManyMovieReviewLikeResolver,
    createMovieReviewLike: actionResolvers.CreateMovieReviewLikeResolver,
    createManyMovieReviewLike: actionResolvers.CreateManyMovieReviewLikeResolver,
    deleteMovieReviewLike: actionResolvers.DeleteMovieReviewLikeResolver,
    updateMovieReviewLike: actionResolvers.UpdateMovieReviewLikeResolver,
    deleteManyMovieReviewLike: actionResolvers.DeleteManyMovieReviewLikeResolver,
    updateManyMovieReviewLike: actionResolvers.UpdateManyMovieReviewLikeResolver,
    upsertMovieReviewLike: actionResolvers.UpsertMovieReviewLikeResolver,
    aggregateMovieReviewLike: actionResolvers.AggregateMovieReviewLikeResolver,
    groupByMovieReviewLike: actionResolvers.GroupByMovieReviewLikeResolver
  }
};
const crudResolversInfo = {
  User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
  Follows: ["findUniqueFollows", "findFirstFollows", "findManyFollows", "createFollows", "createManyFollows", "deleteFollows", "updateFollows", "deleteManyFollows", "updateManyFollows", "upsertFollows", "aggregateFollows", "groupByFollows"],
  Notification: ["notification", "findFirstNotification", "notifications", "createNotification", "createManyNotification", "deleteNotification", "updateNotification", "deleteManyNotification", "updateManyNotification", "upsertNotification", "aggregateNotification", "groupByNotification"],
  Watchlist: ["watchlist", "findFirstWatchlist", "watchlists", "createWatchlist", "createManyWatchlist", "deleteWatchlist", "updateWatchlist", "deleteManyWatchlist", "updateManyWatchlist", "upsertWatchlist", "aggregateWatchlist", "groupByWatchlist"],
  Person: ["person", "findFirstPerson", "people", "createPerson", "createManyPerson", "deletePerson", "updatePerson", "deleteManyPerson", "updateManyPerson", "upsertPerson", "aggregatePerson", "groupByPerson"],
  Movie: ["movie", "findFirstMovie", "movies", "createMovie", "createManyMovie", "deleteMovie", "updateMovie", "deleteManyMovie", "updateManyMovie", "upsertMovie", "aggregateMovie", "groupByMovie"],
  Show: ["show", "findFirstShow", "shows", "createShow", "createManyShow", "deleteShow", "updateShow", "deleteManyShow", "updateManyShow", "upsertShow", "aggregateShow", "groupByShow"],
  Platform: ["platform", "findFirstPlatform", "platforms", "createPlatform", "createManyPlatform", "deletePlatform", "updatePlatform", "deleteManyPlatform", "updateManyPlatform", "upsertPlatform", "aggregatePlatform", "groupByPlatform"],
  SongInMovie: ["songInMovie", "findFirstSongInMovie", "songInMovies", "createSongInMovie", "createManySongInMovie", "deleteSongInMovie", "updateSongInMovie", "deleteManySongInMovie", "updateManySongInMovie", "upsertSongInMovie", "aggregateSongInMovie", "groupBySongInMovie"],
  SongInShow: ["songInShow", "findFirstSongInShow", "songInShows", "createSongInShow", "createManySongInShow", "deleteSongInShow", "updateSongInShow", "deleteManySongInShow", "updateManySongInShow", "upsertSongInShow", "aggregateSongInShow", "groupBySongInShow"],
  ActorInMovie: ["actorInMovie", "findFirstActorInMovie", "actorInMovies", "createActorInMovie", "createManyActorInMovie", "deleteActorInMovie", "updateActorInMovie", "deleteManyActorInMovie", "updateManyActorInMovie", "upsertActorInMovie", "aggregateActorInMovie", "groupByActorInMovie"],
  ActorInShow: ["actorInShow", "findFirstActorInShow", "actorInShows", "createActorInShow", "createManyActorInShow", "deleteActorInShow", "updateActorInShow", "deleteManyActorInShow", "updateManyActorInShow", "upsertActorInShow", "aggregateActorInShow", "groupByActorInShow"],
  Book: ["book", "findFirstBook", "books", "createBook", "createManyBook", "deleteBook", "updateBook", "deleteManyBook", "updateManyBook", "upsertBook", "aggregateBook", "groupByBook"],
  Song: ["song", "findFirstSong", "songs", "createSong", "createManySong", "deleteSong", "updateSong", "deleteManySong", "updateManySong", "upsertSong", "aggregateSong", "groupBySong"],
  Genre: ["genre", "findFirstGenre", "genres", "createGenre", "createManyGenre", "deleteGenre", "updateGenre", "deleteManyGenre", "updateManyGenre", "upsertGenre", "aggregateGenre", "groupByGenre"],
  MovieReview: ["movieReview", "findFirstMovieReview", "movieReviews", "createMovieReview", "createManyMovieReview", "deleteMovieReview", "updateMovieReview", "deleteManyMovieReview", "updateManyMovieReview", "upsertMovieReview", "aggregateMovieReview", "groupByMovieReview"],
  MovieReviewLike: ["movieReviewLike", "findFirstMovieReviewLike", "movieReviewLikes", "createMovieReviewLike", "createManyMovieReviewLike", "deleteMovieReviewLike", "updateMovieReviewLike", "deleteManyMovieReviewLike", "updateManyMovieReviewLike", "upsertMovieReviewLike", "aggregateMovieReviewLike", "groupByMovieReviewLike"]
};
const argsInfo = {
  FindUniqueUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateUserArgs: ["data"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  DeleteUserArgs: ["where"],
  UpdateUserArgs: ["data", "where"],
  DeleteManyUserArgs: ["where"],
  UpdateManyUserArgs: ["data", "where"],
  UpsertUserArgs: ["where", "create", "update"],
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFollowsArgs: ["where"],
  FindFirstFollowsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFollowsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFollowsArgs: ["data"],
  CreateManyFollowsArgs: ["data", "skipDuplicates"],
  DeleteFollowsArgs: ["where"],
  UpdateFollowsArgs: ["data", "where"],
  DeleteManyFollowsArgs: ["where"],
  UpdateManyFollowsArgs: ["data", "where"],
  UpsertFollowsArgs: ["where", "create", "update"],
  AggregateFollowsArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFollowsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueNotificationArgs: ["where"],
  FindFirstNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateNotificationArgs: ["data"],
  CreateManyNotificationArgs: ["data", "skipDuplicates"],
  DeleteNotificationArgs: ["where"],
  UpdateNotificationArgs: ["data", "where"],
  DeleteManyNotificationArgs: ["where"],
  UpdateManyNotificationArgs: ["data", "where"],
  UpsertNotificationArgs: ["where", "create", "update"],
  AggregateNotificationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByNotificationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueWatchlistArgs: ["where"],
  FindFirstWatchlistArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyWatchlistArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateWatchlistArgs: ["data"],
  CreateManyWatchlistArgs: ["data", "skipDuplicates"],
  DeleteWatchlistArgs: ["where"],
  UpdateWatchlistArgs: ["data", "where"],
  DeleteManyWatchlistArgs: ["where"],
  UpdateManyWatchlistArgs: ["data", "where"],
  UpsertWatchlistArgs: ["where", "create", "update"],
  AggregateWatchlistArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByWatchlistArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePersonArgs: ["where"],
  FindFirstPersonArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyPersonArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreatePersonArgs: ["data"],
  CreateManyPersonArgs: ["data", "skipDuplicates"],
  DeletePersonArgs: ["where"],
  UpdatePersonArgs: ["data", "where"],
  DeleteManyPersonArgs: ["where"],
  UpdateManyPersonArgs: ["data", "where"],
  UpsertPersonArgs: ["where", "create", "update"],
  AggregatePersonArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPersonArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueMovieArgs: ["where"],
  FindFirstMovieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyMovieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateMovieArgs: ["data"],
  CreateManyMovieArgs: ["data", "skipDuplicates"],
  DeleteMovieArgs: ["where"],
  UpdateMovieArgs: ["data", "where"],
  DeleteManyMovieArgs: ["where"],
  UpdateManyMovieArgs: ["data", "where"],
  UpsertMovieArgs: ["where", "create", "update"],
  AggregateMovieArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMovieArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueShowArgs: ["where"],
  FindFirstShowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyShowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateShowArgs: ["data"],
  CreateManyShowArgs: ["data", "skipDuplicates"],
  DeleteShowArgs: ["where"],
  UpdateShowArgs: ["data", "where"],
  DeleteManyShowArgs: ["where"],
  UpdateManyShowArgs: ["data", "where"],
  UpsertShowArgs: ["where", "create", "update"],
  AggregateShowArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByShowArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePlatformArgs: ["where"],
  FindFirstPlatformArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyPlatformArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreatePlatformArgs: ["data"],
  CreateManyPlatformArgs: ["data", "skipDuplicates"],
  DeletePlatformArgs: ["where"],
  UpdatePlatformArgs: ["data", "where"],
  DeleteManyPlatformArgs: ["where"],
  UpdateManyPlatformArgs: ["data", "where"],
  UpsertPlatformArgs: ["where", "create", "update"],
  AggregatePlatformArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPlatformArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSongInMovieArgs: ["where"],
  FindFirstSongInMovieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySongInMovieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSongInMovieArgs: ["data"],
  CreateManySongInMovieArgs: ["data", "skipDuplicates"],
  DeleteSongInMovieArgs: ["where"],
  UpdateSongInMovieArgs: ["data", "where"],
  DeleteManySongInMovieArgs: ["where"],
  UpdateManySongInMovieArgs: ["data", "where"],
  UpsertSongInMovieArgs: ["where", "create", "update"],
  AggregateSongInMovieArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySongInMovieArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSongInShowArgs: ["where"],
  FindFirstSongInShowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySongInShowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSongInShowArgs: ["data"],
  CreateManySongInShowArgs: ["data", "skipDuplicates"],
  DeleteSongInShowArgs: ["where"],
  UpdateSongInShowArgs: ["data", "where"],
  DeleteManySongInShowArgs: ["where"],
  UpdateManySongInShowArgs: ["data", "where"],
  UpsertSongInShowArgs: ["where", "create", "update"],
  AggregateSongInShowArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySongInShowArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueActorInMovieArgs: ["where"],
  FindFirstActorInMovieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActorInMovieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateActorInMovieArgs: ["data"],
  CreateManyActorInMovieArgs: ["data", "skipDuplicates"],
  DeleteActorInMovieArgs: ["where"],
  UpdateActorInMovieArgs: ["data", "where"],
  DeleteManyActorInMovieArgs: ["where"],
  UpdateManyActorInMovieArgs: ["data", "where"],
  UpsertActorInMovieArgs: ["where", "create", "update"],
  AggregateActorInMovieArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByActorInMovieArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueActorInShowArgs: ["where"],
  FindFirstActorInShowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActorInShowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateActorInShowArgs: ["data"],
  CreateManyActorInShowArgs: ["data", "skipDuplicates"],
  DeleteActorInShowArgs: ["where"],
  UpdateActorInShowArgs: ["data", "where"],
  DeleteManyActorInShowArgs: ["where"],
  UpdateManyActorInShowArgs: ["data", "where"],
  UpsertActorInShowArgs: ["where", "create", "update"],
  AggregateActorInShowArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByActorInShowArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueBookArgs: ["where"],
  FindFirstBookArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyBookArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateBookArgs: ["data"],
  CreateManyBookArgs: ["data", "skipDuplicates"],
  DeleteBookArgs: ["where"],
  UpdateBookArgs: ["data", "where"],
  DeleteManyBookArgs: ["where"],
  UpdateManyBookArgs: ["data", "where"],
  UpsertBookArgs: ["where", "create", "update"],
  AggregateBookArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByBookArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSongArgs: ["where"],
  FindFirstSongArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySongArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSongArgs: ["data"],
  CreateManySongArgs: ["data", "skipDuplicates"],
  DeleteSongArgs: ["where"],
  UpdateSongArgs: ["data", "where"],
  DeleteManySongArgs: ["where"],
  UpdateManySongArgs: ["data", "where"],
  UpsertSongArgs: ["where", "create", "update"],
  AggregateSongArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySongArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueGenreArgs: ["where"],
  FindFirstGenreArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyGenreArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateGenreArgs: ["data"],
  CreateManyGenreArgs: ["data", "skipDuplicates"],
  DeleteGenreArgs: ["where"],
  UpdateGenreArgs: ["data", "where"],
  DeleteManyGenreArgs: ["where"],
  UpdateManyGenreArgs: ["data", "where"],
  UpsertGenreArgs: ["where", "create", "update"],
  AggregateGenreArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByGenreArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueMovieReviewArgs: ["where"],
  FindFirstMovieReviewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyMovieReviewArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateMovieReviewArgs: ["data"],
  CreateManyMovieReviewArgs: ["data", "skipDuplicates"],
  DeleteMovieReviewArgs: ["where"],
  UpdateMovieReviewArgs: ["data", "where"],
  DeleteManyMovieReviewArgs: ["where"],
  UpdateManyMovieReviewArgs: ["data", "where"],
  UpsertMovieReviewArgs: ["where", "create", "update"],
  AggregateMovieReviewArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMovieReviewArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueMovieReviewLikeArgs: ["where"],
  FindFirstMovieReviewLikeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyMovieReviewLikeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateMovieReviewLikeArgs: ["data"],
  CreateManyMovieReviewLikeArgs: ["data", "skipDuplicates"],
  DeleteMovieReviewLikeArgs: ["where"],
  UpdateMovieReviewLikeArgs: ["data", "where"],
  DeleteManyMovieReviewLikeArgs: ["where"],
  UpdateManyMovieReviewLikeArgs: ["data", "where"],
  UpsertMovieReviewLikeArgs: ["where", "create", "update"],
  AggregateMovieReviewLikeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByMovieReviewLikeArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<
  TModel extends ResolverModelNames
  > = keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<
  TModel extends ResolverModelNames
  > = Partial<Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames = crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function).prototype;
        tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
        tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (actionResolversConfig[
        resolverActionName as keyof typeof actionResolversConfig
      ] as Function).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<
  TArgsType extends ArgsTypesNames
  > = FieldsConfig<ArgFieldNames<TArgsType>>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName = argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  User: relationResolvers.UserRelationsResolver,
  Follows: relationResolvers.FollowsRelationsResolver,
  Notification: relationResolvers.NotificationRelationsResolver,
  Watchlist: relationResolvers.WatchlistRelationsResolver,
  Person: relationResolvers.PersonRelationsResolver,
  Movie: relationResolvers.MovieRelationsResolver,
  Show: relationResolvers.ShowRelationsResolver,
  Platform: relationResolvers.PlatformRelationsResolver,
  SongInMovie: relationResolvers.SongInMovieRelationsResolver,
  SongInShow: relationResolvers.SongInShowRelationsResolver,
  ActorInMovie: relationResolvers.ActorInMovieRelationsResolver,
  ActorInShow: relationResolvers.ActorInShowRelationsResolver,
  Book: relationResolvers.BookRelationsResolver,
  Song: relationResolvers.SongRelationsResolver,
  Genre: relationResolvers.GenreRelationsResolver,
  MovieReview: relationResolvers.MovieReviewRelationsResolver,
  MovieReviewLike: relationResolvers.MovieReviewLikeRelationsResolver
};
const relationResolversInfo = {
  User: ["following", "followers", "notifications", "watchlist", "movieReviews", "likedMovieReviews"],
  Follows: ["following", "follower"],
  Notification: ["user"],
  Watchlist: ["user", "movies", "shows"],
  Person: ["movies", "shows", "books", "songs"],
  Movie: ["actors", "genres", "platforms", "soundtrack", "watchlist", "review"],
  Show: ["actors", "genres", "platforms", "soundtrack", "watchlist"],
  Platform: ["shows", "movies"],
  SongInMovie: ["song", "movie"],
  SongInShow: ["song", "show"],
  ActorInMovie: ["movie", "person"],
  ActorInShow: ["show", "person"],
  Book: ["authors", "genres"],
  Song: ["artists", "songInShow", "songInMovie", "genres"],
  Genre: ["movies", "shows", "songs", "books"],
  MovieReview: ["likes", "User", "Movie"],
  MovieReviewLike: ["user", "movieReview"]
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<
  TModel extends RelationResolverModelNames
  > = keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<TModel extends RelationResolverModelNames>
  = Partial<Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
    const modelName = relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig = relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames = relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
      }
    }
    const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | "_all", PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(
      it => it !== "_all"
    );
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  User: ["id", "confirmed", "email", "username", "displayname", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  Follows: ["followingId", "followerId", "createdAt"],
  Notification: ["id", "userId", "message", "read", "createdAt"],
  Watchlist: ["id", "userId", "createdAt"],
  Person: ["id", "career", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt"],
  Movie: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  Show: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  Platform: ["id", "name", "apiKey"],
  SongInMovie: ["timestamp", "description", "songId", "movieId"],
  SongInShow: ["timestamp", "description", "songId", "showId"],
  ActorInMovie: ["movieId", "personId", "role"],
  ActorInShow: ["showId", "personId", "role"],
  Book: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  Song: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  Genre: ["id", "name"],
  MovieReview: ["id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewLike: ["userId", "movieReviewId"]
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
  UserGroupBy: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFollows: ["_count", "_avg", "_sum", "_min", "_max"],
  FollowsGroupBy: ["followingId", "followerId", "createdAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateNotification: ["_count", "_avg", "_sum", "_min", "_max"],
  NotificationGroupBy: ["id", "userId", "message", "read", "createdAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateWatchlist: ["_count", "_avg", "_sum", "_min", "_max"],
  WatchlistGroupBy: ["id", "userId", "createdAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregatePerson: ["_count", "_avg", "_sum", "_min", "_max"],
  PersonGroupBy: ["id", "career", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateMovie: ["_count", "_avg", "_sum", "_min", "_max"],
  MovieGroupBy: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateShow: ["_count", "_avg", "_sum", "_min", "_max"],
  ShowGroupBy: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregatePlatform: ["_count", "_avg", "_sum", "_min", "_max"],
  PlatformGroupBy: ["id", "name", "apiKey", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateSongInMovie: ["_count", "_avg", "_sum", "_min", "_max"],
  SongInMovieGroupBy: ["timestamp", "description", "songId", "movieId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateSongInShow: ["_count", "_avg", "_sum", "_min", "_max"],
  SongInShowGroupBy: ["timestamp", "description", "songId", "showId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateActorInMovie: ["_count", "_avg", "_sum", "_min", "_max"],
  ActorInMovieGroupBy: ["movieId", "personId", "role", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateActorInShow: ["_count", "_avg", "_sum", "_min", "_max"],
  ActorInShowGroupBy: ["showId", "personId", "role", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateBook: ["_count", "_avg", "_sum", "_min", "_max"],
  BookGroupBy: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateSong: ["_count", "_avg", "_sum", "_min", "_max"],
  SongGroupBy: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateGenre: ["_count", "_avg", "_sum", "_min", "_max"],
  GenreGroupBy: ["id", "name", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateMovieReview: ["_count", "_avg", "_sum", "_min", "_max"],
  MovieReviewGroupBy: ["id", "title", "review", "rating", "userId", "movieId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateMovieReviewLike: ["_count", "_avg", "_sum", "_min", "_max"],
  MovieReviewLikeGroupBy: ["userId", "movieReviewId", "_count", "_avg", "_sum", "_min", "_max"],
  AffectedRowsOutput: ["count"],
  UserCount: ["following", "followers", "notifications", "movieReviews", "likedMovieReviews"],
  UserCountAggregate: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "_all"],
  UserAvgAggregate: ["id"],
  UserSumAggregate: ["id"],
  UserMinAggregate: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  UserMaxAggregate: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  FollowsCountAggregate: ["followingId", "followerId", "createdAt", "_all"],
  FollowsAvgAggregate: ["followingId", "followerId"],
  FollowsSumAggregate: ["followingId", "followerId"],
  FollowsMinAggregate: ["followingId", "followerId", "createdAt"],
  FollowsMaxAggregate: ["followingId", "followerId", "createdAt"],
  NotificationCountAggregate: ["id", "userId", "message", "read", "createdAt", "_all"],
  NotificationAvgAggregate: ["id", "userId"],
  NotificationSumAggregate: ["id", "userId"],
  NotificationMinAggregate: ["id", "userId", "message", "read", "createdAt"],
  NotificationMaxAggregate: ["id", "userId", "message", "read", "createdAt"],
  WatchlistCount: ["movies", "shows"],
  WatchlistCountAggregate: ["id", "userId", "createdAt", "_all"],
  WatchlistAvgAggregate: ["id", "userId"],
  WatchlistSumAggregate: ["id", "userId"],
  WatchlistMinAggregate: ["id", "userId", "createdAt"],
  WatchlistMaxAggregate: ["id", "userId", "createdAt"],
  PersonCount: ["movies", "shows", "books", "songs"],
  PersonCountAggregate: ["id", "career", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "_all"],
  PersonAvgAggregate: ["id", "age"],
  PersonSumAggregate: ["id", "age"],
  PersonMinAggregate: ["id", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt"],
  PersonMaxAggregate: ["id", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt"],
  MovieCount: ["actors", "genres", "platforms", "soundtrack", "watchlist", "review"],
  MovieCountAggregate: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "_all"],
  MovieAvgAggregate: ["id", "runtime", "revenue"],
  MovieSumAggregate: ["id", "runtime", "revenue"],
  MovieMinAggregate: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  MovieMaxAggregate: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  ShowCount: ["actors", "genres", "platforms", "soundtrack", "watchlist"],
  ShowCountAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "_all"],
  ShowAvgAggregate: ["id"],
  ShowSumAggregate: ["id"],
  ShowMinAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  ShowMaxAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  PlatformCount: ["shows", "movies"],
  PlatformCountAggregate: ["id", "name", "apiKey", "_all"],
  PlatformAvgAggregate: ["id"],
  PlatformSumAggregate: ["id"],
  PlatformMinAggregate: ["id", "name", "apiKey"],
  PlatformMaxAggregate: ["id", "name", "apiKey"],
  SongInMovieCountAggregate: ["timestamp", "description", "songId", "movieId", "_all"],
  SongInMovieAvgAggregate: ["songId", "movieId"],
  SongInMovieSumAggregate: ["songId", "movieId"],
  SongInMovieMinAggregate: ["timestamp", "description", "songId", "movieId"],
  SongInMovieMaxAggregate: ["timestamp", "description", "songId", "movieId"],
  SongInShowCountAggregate: ["timestamp", "description", "songId", "showId", "_all"],
  SongInShowAvgAggregate: ["songId", "showId"],
  SongInShowSumAggregate: ["songId", "showId"],
  SongInShowMinAggregate: ["timestamp", "description", "songId", "showId"],
  SongInShowMaxAggregate: ["timestamp", "description", "songId", "showId"],
  ActorInMovieCountAggregate: ["movieId", "personId", "role", "_all"],
  ActorInMovieAvgAggregate: ["movieId", "personId"],
  ActorInMovieSumAggregate: ["movieId", "personId"],
  ActorInMovieMinAggregate: ["movieId", "personId", "role"],
  ActorInMovieMaxAggregate: ["movieId", "personId", "role"],
  ActorInShowCountAggregate: ["showId", "personId", "role", "_all"],
  ActorInShowAvgAggregate: ["showId", "personId"],
  ActorInShowSumAggregate: ["showId", "personId"],
  ActorInShowMinAggregate: ["showId", "personId", "role"],
  ActorInShowMaxAggregate: ["showId", "personId", "role"],
  BookCount: ["authors", "genres"],
  BookCountAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "_all"],
  BookAvgAggregate: ["id"],
  BookSumAggregate: ["id"],
  BookMinAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  BookMaxAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  SongCount: ["artists", "songInShow", "songInMovie", "genres"],
  SongCountAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "_all"],
  SongAvgAggregate: ["id"],
  SongSumAggregate: ["id"],
  SongMinAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  SongMaxAggregate: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  GenreCount: ["movies", "shows", "songs", "books"],
  GenreCountAggregate: ["id", "name", "_all"],
  GenreAvgAggregate: ["id"],
  GenreSumAggregate: ["id"],
  GenreMinAggregate: ["id", "name"],
  GenreMaxAggregate: ["id", "name"],
  MovieReviewCount: ["likes"],
  MovieReviewCountAggregate: ["id", "title", "review", "rating", "userId", "movieId", "_all"],
  MovieReviewAvgAggregate: ["id", "rating", "userId", "movieId"],
  MovieReviewSumAggregate: ["id", "rating", "userId", "movieId"],
  MovieReviewMinAggregate: ["id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewMaxAggregate: ["id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewLikeCountAggregate: ["userId", "movieReviewId", "_all"],
  MovieReviewLikeAvgAggregate: ["userId", "movieReviewId"],
  MovieReviewLikeSumAggregate: ["userId", "movieReviewId"],
  MovieReviewLikeMinAggregate: ["userId", "movieReviewId"],
  MovieReviewLikeMaxAggregate: ["userId", "movieReviewId"]
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<
  TOutput extends OutputTypesNames
  > = FieldsConfig<OutputTypeFieldNames<TOutput>>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName = outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  UserWhereInput: ["AND", "OR", "NOT", "id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "following", "followers", "notifications", "watchlist", "movieReviews", "likedMovieReviews", "createdAt", "updatedAt"],
  UserOrderByWithRelationInput: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "following", "followers", "notifications", "watchlist", "movieReviews", "likedMovieReviews", "createdAt", "updatedAt"],
  UserWhereUniqueInput: ["id", "email", "username"],
  UserOrderByWithAggregationInput: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
  UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  FollowsWhereInput: ["AND", "OR", "NOT", "following", "followingId", "follower", "followerId", "createdAt"],
  FollowsOrderByWithRelationInput: ["following", "followingId", "follower", "followerId", "createdAt"],
  FollowsWhereUniqueInput: ["followerId_followingId"],
  FollowsOrderByWithAggregationInput: ["followingId", "followerId", "createdAt", "_count", "_avg", "_max", "_min", "_sum"],
  FollowsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "followingId", "followerId", "createdAt"],
  NotificationWhereInput: ["AND", "OR", "NOT", "id", "user", "userId", "message", "read", "createdAt"],
  NotificationOrderByWithRelationInput: ["id", "user", "userId", "message", "read", "createdAt"],
  NotificationWhereUniqueInput: ["id"],
  NotificationOrderByWithAggregationInput: ["id", "userId", "message", "read", "createdAt", "_count", "_avg", "_max", "_min", "_sum"],
  NotificationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "message", "read", "createdAt"],
  WatchlistWhereInput: ["AND", "OR", "NOT", "id", "user", "userId", "movies", "shows", "createdAt"],
  WatchlistOrderByWithRelationInput: ["id", "user", "userId", "movies", "shows", "createdAt"],
  WatchlistWhereUniqueInput: ["id", "userId"],
  WatchlistOrderByWithAggregationInput: ["id", "userId", "createdAt", "_count", "_avg", "_max", "_min", "_sum"],
  WatchlistScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "createdAt"],
  PersonWhereInput: ["AND", "OR", "NOT", "id", "career", "name", "thumbnail", "bio", "age", "movies", "shows", "books", "songs", "createdAt", "updatedAt"],
  PersonOrderByWithRelationInput: ["id", "career", "name", "thumbnail", "bio", "age", "movies", "shows", "books", "songs", "createdAt", "updatedAt"],
  PersonWhereUniqueInput: ["id"],
  PersonOrderByWithAggregationInput: ["id", "career", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
  PersonScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "career", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt"],
  MovieWhereInput: ["AND", "OR", "NOT", "id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "actors", "genres", "platforms", "soundtrack", "watchlist", "review", "createdAt", "updatedAt"],
  MovieOrderByWithRelationInput: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "actors", "genres", "platforms", "soundtrack", "watchlist", "review", "createdAt", "updatedAt"],
  MovieWhereUniqueInput: ["id"],
  MovieOrderByWithAggregationInput: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
  MovieScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  ShowWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "actors", "genres", "platforms", "soundtrack", "watchlist", "createdAt", "updatedAt"],
  ShowOrderByWithRelationInput: ["id", "title", "description", "thumbnail", "locked", "released", "actors", "genres", "platforms", "soundtrack", "watchlist", "createdAt", "updatedAt"],
  ShowWhereUniqueInput: ["id"],
  ShowOrderByWithAggregationInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
  ShowScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  PlatformWhereInput: ["AND", "OR", "NOT", "id", "name", "apiKey", "shows", "movies"],
  PlatformOrderByWithRelationInput: ["id", "name", "apiKey", "shows", "movies"],
  PlatformWhereUniqueInput: ["id"],
  PlatformOrderByWithAggregationInput: ["id", "name", "apiKey", "_count", "_avg", "_max", "_min", "_sum"],
  PlatformScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "apiKey"],
  SongInMovieWhereInput: ["AND", "OR", "NOT", "timestamp", "description", "song", "songId", "movie", "movieId"],
  SongInMovieOrderByWithRelationInput: ["timestamp", "description", "song", "songId", "movie", "movieId"],
  SongInMovieWhereUniqueInput: ["songId_movieId"],
  SongInMovieOrderByWithAggregationInput: ["timestamp", "description", "songId", "movieId", "_count", "_avg", "_max", "_min", "_sum"],
  SongInMovieScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "timestamp", "description", "songId", "movieId"],
  SongInShowWhereInput: ["AND", "OR", "NOT", "timestamp", "description", "song", "songId", "show", "showId"],
  SongInShowOrderByWithRelationInput: ["timestamp", "description", "song", "songId", "show", "showId"],
  SongInShowWhereUniqueInput: ["songId_showId"],
  SongInShowOrderByWithAggregationInput: ["timestamp", "description", "songId", "showId", "_count", "_avg", "_max", "_min", "_sum"],
  SongInShowScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "timestamp", "description", "songId", "showId"],
  ActorInMovieWhereInput: ["AND", "OR", "NOT", "movie", "movieId", "person", "personId", "role"],
  ActorInMovieOrderByWithRelationInput: ["movie", "movieId", "person", "personId", "role"],
  ActorInMovieWhereUniqueInput: ["personId_movieId"],
  ActorInMovieOrderByWithAggregationInput: ["movieId", "personId", "role", "_count", "_avg", "_max", "_min", "_sum"],
  ActorInMovieScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "movieId", "personId", "role"],
  ActorInShowWhereInput: ["AND", "OR", "NOT", "show", "showId", "person", "personId", "role"],
  ActorInShowOrderByWithRelationInput: ["show", "showId", "person", "personId", "role"],
  ActorInShowWhereUniqueInput: ["personId_showId"],
  ActorInShowOrderByWithAggregationInput: ["showId", "personId", "role", "_count", "_avg", "_max", "_min", "_sum"],
  ActorInShowScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "showId", "personId", "role"],
  BookWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "authors", "genres", "createdAt", "updatedAt"],
  BookOrderByWithRelationInput: ["id", "title", "description", "thumbnail", "locked", "released", "authors", "genres", "createdAt", "updatedAt"],
  BookWhereUniqueInput: ["id"],
  BookOrderByWithAggregationInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
  BookScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  SongWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "artists", "songInShow", "songInMovie", "genres", "createdAt"],
  SongOrderByWithRelationInput: ["id", "title", "description", "thumbnail", "locked", "released", "artists", "songInShow", "songInMovie", "genres", "createdAt"],
  SongWhereUniqueInput: ["id"],
  SongOrderByWithAggregationInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "_count", "_avg", "_max", "_min", "_sum"],
  SongScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  GenreWhereInput: ["AND", "OR", "NOT", "id", "name", "movies", "shows", "songs", "books"],
  GenreOrderByWithRelationInput: ["id", "name", "movies", "shows", "songs", "books"],
  GenreWhereUniqueInput: ["id"],
  GenreOrderByWithAggregationInput: ["id", "name", "_count", "_avg", "_max", "_min", "_sum"],
  GenreScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name"],
  MovieReviewWhereInput: ["AND", "OR", "NOT", "id", "title", "review", "rating", "likes", "User", "userId", "Movie", "movieId"],
  MovieReviewOrderByWithRelationInput: ["id", "title", "review", "rating", "likes", "User", "userId", "Movie", "movieId"],
  MovieReviewWhereUniqueInput: ["id"],
  MovieReviewOrderByWithAggregationInput: ["id", "title", "review", "rating", "userId", "movieId", "_count", "_avg", "_max", "_min", "_sum"],
  MovieReviewScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewLikeWhereInput: ["AND", "OR", "NOT", "user", "userId", "movieReview", "movieReviewId"],
  MovieReviewLikeOrderByWithRelationInput: ["user", "userId", "movieReview", "movieReviewId"],
  MovieReviewLikeWhereUniqueInput: ["userId_movieReviewId"],
  MovieReviewLikeOrderByWithAggregationInput: ["userId", "movieReviewId", "_count", "_avg", "_max", "_min", "_sum"],
  MovieReviewLikeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "userId", "movieReviewId"],
  UserCreateInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "notifications", "watchlist", "movieReviews", "likedMovieReviews"],
  UserUpdateInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "notifications", "watchlist", "movieReviews", "likedMovieReviews"],
  UserCreateManyInput: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  UserUpdateManyMutationInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  FollowsCreateInput: ["createdAt", "following", "follower"],
  FollowsUpdateInput: ["createdAt", "following", "follower"],
  FollowsCreateManyInput: ["followingId", "followerId", "createdAt"],
  FollowsUpdateManyMutationInput: ["createdAt"],
  NotificationCreateInput: ["message", "read", "createdAt", "user"],
  NotificationUpdateInput: ["message", "read", "createdAt", "user"],
  NotificationCreateManyInput: ["id", "userId", "message", "read", "createdAt"],
  NotificationUpdateManyMutationInput: ["message", "read", "createdAt"],
  WatchlistCreateInput: ["createdAt", "user", "movies", "shows"],
  WatchlistUpdateInput: ["createdAt", "user", "movies", "shows"],
  WatchlistCreateManyInput: ["id", "userId", "createdAt"],
  WatchlistUpdateManyMutationInput: ["createdAt"],
  PersonCreateInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "movies", "shows", "books", "songs"],
  PersonUpdateInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "movies", "shows", "books", "songs"],
  PersonCreateManyInput: ["id", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career"],
  PersonUpdateManyMutationInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career"],
  MovieCreateInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack", "watchlist", "review"],
  MovieUpdateInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack", "watchlist", "review"],
  MovieCreateManyInput: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  MovieUpdateManyMutationInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  ShowCreateInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack", "watchlist"],
  ShowUpdateInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack", "watchlist"],
  ShowCreateManyInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  ShowUpdateManyMutationInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  PlatformCreateInput: ["name", "apiKey", "shows", "movies"],
  PlatformUpdateInput: ["name", "apiKey", "shows", "movies"],
  PlatformCreateManyInput: ["id", "name", "apiKey"],
  PlatformUpdateManyMutationInput: ["name", "apiKey"],
  SongInMovieCreateInput: ["timestamp", "description", "song", "movie"],
  SongInMovieUpdateInput: ["timestamp", "description", "song", "movie"],
  SongInMovieCreateManyInput: ["timestamp", "description", "songId", "movieId"],
  SongInMovieUpdateManyMutationInput: ["timestamp", "description"],
  SongInShowCreateInput: ["timestamp", "description", "song", "show"],
  SongInShowUpdateInput: ["timestamp", "description", "song", "show"],
  SongInShowCreateManyInput: ["timestamp", "description", "songId", "showId"],
  SongInShowUpdateManyMutationInput: ["timestamp", "description"],
  ActorInMovieCreateInput: ["role", "movie", "person"],
  ActorInMovieUpdateInput: ["role", "movie", "person"],
  ActorInMovieCreateManyInput: ["movieId", "personId", "role"],
  ActorInMovieUpdateManyMutationInput: ["role"],
  ActorInShowCreateInput: ["role", "show", "person"],
  ActorInShowUpdateInput: ["role", "show", "person"],
  ActorInShowCreateManyInput: ["showId", "personId", "role"],
  ActorInShowUpdateManyMutationInput: ["role"],
  BookCreateInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "authors", "genres"],
  BookUpdateInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "authors", "genres"],
  BookCreateManyInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  BookUpdateManyMutationInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  SongCreateInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "artists", "songInShow", "songInMovie", "genres"],
  SongUpdateInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "artists", "songInShow", "songInMovie", "genres"],
  SongCreateManyInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  SongUpdateManyMutationInput: ["title", "description", "thumbnail", "locked", "released", "createdAt"],
  GenreCreateInput: ["name", "movies", "shows", "songs", "books"],
  GenreUpdateInput: ["name", "movies", "shows", "songs", "books"],
  GenreCreateManyInput: ["id", "name"],
  GenreUpdateManyMutationInput: ["name"],
  MovieReviewCreateInput: ["title", "review", "rating", "likes", "User", "Movie"],
  MovieReviewUpdateInput: ["title", "review", "rating", "likes", "User", "Movie"],
  MovieReviewCreateManyInput: ["id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewUpdateManyMutationInput: ["title", "review", "rating"],
  MovieReviewLikeCreateInput: ["user", "movieReview"],
  MovieReviewLikeUpdateInput: ["user", "movieReview"],
  MovieReviewLikeCreateManyInput: ["userId", "movieReviewId"],
  MovieReviewLikeUpdateManyMutationInput: [],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  BoolFilter: ["equals", "not"],
  StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  EnumRoleFilter: ["equals", "in", "notIn", "not"],
  FollowsListRelationFilter: ["every", "some", "none"],
  NotificationListRelationFilter: ["every", "some", "none"],
  WatchlistRelationFilter: ["is", "isNot"],
  MovieReviewListRelationFilter: ["every", "some", "none"],
  MovieReviewLikeListRelationFilter: ["every", "some", "none"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  FollowsOrderByRelationAggregateInput: ["_count"],
  NotificationOrderByRelationAggregateInput: ["_count"],
  MovieReviewOrderByRelationAggregateInput: ["_count"],
  MovieReviewLikeOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  UserAvgOrderByAggregateInput: ["id"],
  UserMaxOrderByAggregateInput: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  UserMinOrderByAggregateInput: ["id", "confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt"],
  UserSumOrderByAggregateInput: ["id"],
  IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  EnumRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  UserRelationFilter: ["is", "isNot"],
  FollowsFollowerIdFollowingIdCompoundUniqueInput: ["followerId", "followingId"],
  FollowsCountOrderByAggregateInput: ["followingId", "followerId", "createdAt"],
  FollowsAvgOrderByAggregateInput: ["followingId", "followerId"],
  FollowsMaxOrderByAggregateInput: ["followingId", "followerId", "createdAt"],
  FollowsMinOrderByAggregateInput: ["followingId", "followerId", "createdAt"],
  FollowsSumOrderByAggregateInput: ["followingId", "followerId"],
  IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NotificationCountOrderByAggregateInput: ["id", "userId", "message", "read", "createdAt"],
  NotificationAvgOrderByAggregateInput: ["id", "userId"],
  NotificationMaxOrderByAggregateInput: ["id", "userId", "message", "read", "createdAt"],
  NotificationMinOrderByAggregateInput: ["id", "userId", "message", "read", "createdAt"],
  NotificationSumOrderByAggregateInput: ["id", "userId"],
  IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  MovieListRelationFilter: ["every", "some", "none"],
  ShowListRelationFilter: ["every", "some", "none"],
  MovieOrderByRelationAggregateInput: ["_count"],
  ShowOrderByRelationAggregateInput: ["_count"],
  WatchlistCountOrderByAggregateInput: ["id", "userId", "createdAt"],
  WatchlistAvgOrderByAggregateInput: ["id", "userId"],
  WatchlistMaxOrderByAggregateInput: ["id", "userId", "createdAt"],
  WatchlistMinOrderByAggregateInput: ["id", "userId", "createdAt"],
  WatchlistSumOrderByAggregateInput: ["id", "userId"],
  EnumCareerNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
  StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
  ActorInMovieListRelationFilter: ["every", "some", "none"],
  ActorInShowListRelationFilter: ["every", "some", "none"],
  BookListRelationFilter: ["every", "some", "none"],
  SongListRelationFilter: ["every", "some", "none"],
  ActorInMovieOrderByRelationAggregateInput: ["_count"],
  ActorInShowOrderByRelationAggregateInput: ["_count"],
  BookOrderByRelationAggregateInput: ["_count"],
  SongOrderByRelationAggregateInput: ["_count"],
  PersonCountOrderByAggregateInput: ["id", "career", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt"],
  PersonAvgOrderByAggregateInput: ["id", "age"],
  PersonMaxOrderByAggregateInput: ["id", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt"],
  PersonMinOrderByAggregateInput: ["id", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt"],
  PersonSumOrderByAggregateInput: ["id", "age"],
  StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
  DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  FloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  GenreListRelationFilter: ["every", "some", "none"],
  PlatformListRelationFilter: ["every", "some", "none"],
  SongInMovieListRelationFilter: ["every", "some", "none"],
  WatchlistListRelationFilter: ["every", "some", "none"],
  GenreOrderByRelationAggregateInput: ["_count"],
  PlatformOrderByRelationAggregateInput: ["_count"],
  SongInMovieOrderByRelationAggregateInput: ["_count"],
  WatchlistOrderByRelationAggregateInput: ["_count"],
  MovieCountOrderByAggregateInput: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  MovieAvgOrderByAggregateInput: ["id", "runtime", "revenue"],
  MovieMaxOrderByAggregateInput: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  MovieMinOrderByAggregateInput: ["id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  MovieSumOrderByAggregateInput: ["id", "runtime", "revenue"],
  DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  FloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  SongInShowListRelationFilter: ["every", "some", "none"],
  SongInShowOrderByRelationAggregateInput: ["_count"],
  ShowCountOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  ShowAvgOrderByAggregateInput: ["id"],
  ShowMaxOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  ShowMinOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  ShowSumOrderByAggregateInput: ["id"],
  PlatformCountOrderByAggregateInput: ["id", "name", "apiKey"],
  PlatformAvgOrderByAggregateInput: ["id"],
  PlatformMaxOrderByAggregateInput: ["id", "name", "apiKey"],
  PlatformMinOrderByAggregateInput: ["id", "name", "apiKey"],
  PlatformSumOrderByAggregateInput: ["id"],
  SongRelationFilter: ["is", "isNot"],
  MovieRelationFilter: ["is", "isNot"],
  SongInMovieSongIdMovieIdCompoundUniqueInput: ["songId", "movieId"],
  SongInMovieCountOrderByAggregateInput: ["timestamp", "description", "songId", "movieId"],
  SongInMovieAvgOrderByAggregateInput: ["songId", "movieId"],
  SongInMovieMaxOrderByAggregateInput: ["timestamp", "description", "songId", "movieId"],
  SongInMovieMinOrderByAggregateInput: ["timestamp", "description", "songId", "movieId"],
  SongInMovieSumOrderByAggregateInput: ["songId", "movieId"],
  ShowRelationFilter: ["is", "isNot"],
  SongInShowSongIdShowIdCompoundUniqueInput: ["songId", "showId"],
  SongInShowCountOrderByAggregateInput: ["timestamp", "description", "songId", "showId"],
  SongInShowAvgOrderByAggregateInput: ["songId", "showId"],
  SongInShowMaxOrderByAggregateInput: ["timestamp", "description", "songId", "showId"],
  SongInShowMinOrderByAggregateInput: ["timestamp", "description", "songId", "showId"],
  SongInShowSumOrderByAggregateInput: ["songId", "showId"],
  PersonRelationFilter: ["is", "isNot"],
  ActorInMoviePersonIdMovieIdCompoundUniqueInput: ["personId", "movieId"],
  ActorInMovieCountOrderByAggregateInput: ["movieId", "personId", "role"],
  ActorInMovieAvgOrderByAggregateInput: ["movieId", "personId"],
  ActorInMovieMaxOrderByAggregateInput: ["movieId", "personId", "role"],
  ActorInMovieMinOrderByAggregateInput: ["movieId", "personId", "role"],
  ActorInMovieSumOrderByAggregateInput: ["movieId", "personId"],
  ActorInShowPersonIdShowIdCompoundUniqueInput: ["personId", "showId"],
  ActorInShowCountOrderByAggregateInput: ["showId", "personId", "role"],
  ActorInShowAvgOrderByAggregateInput: ["showId", "personId"],
  ActorInShowMaxOrderByAggregateInput: ["showId", "personId", "role"],
  ActorInShowMinOrderByAggregateInput: ["showId", "personId", "role"],
  ActorInShowSumOrderByAggregateInput: ["showId", "personId"],
  PersonListRelationFilter: ["every", "some", "none"],
  PersonOrderByRelationAggregateInput: ["_count"],
  BookCountOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  BookAvgOrderByAggregateInput: ["id"],
  BookMaxOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  BookMinOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  BookSumOrderByAggregateInput: ["id"],
  SongCountOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  SongAvgOrderByAggregateInput: ["id"],
  SongMaxOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  SongMinOrderByAggregateInput: ["id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  SongSumOrderByAggregateInput: ["id"],
  GenreCountOrderByAggregateInput: ["id", "name"],
  GenreAvgOrderByAggregateInput: ["id"],
  GenreMaxOrderByAggregateInput: ["id", "name"],
  GenreMinOrderByAggregateInput: ["id", "name"],
  GenreSumOrderByAggregateInput: ["id"],
  MovieReviewCountOrderByAggregateInput: ["id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewAvgOrderByAggregateInput: ["id", "rating", "userId", "movieId"],
  MovieReviewMaxOrderByAggregateInput: ["id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewMinOrderByAggregateInput: ["id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewSumOrderByAggregateInput: ["id", "rating", "userId", "movieId"],
  MovieReviewRelationFilter: ["is", "isNot"],
  MovieReviewLikeUserIdMovieReviewIdCompoundUniqueInput: ["userId", "movieReviewId"],
  MovieReviewLikeCountOrderByAggregateInput: ["userId", "movieReviewId"],
  MovieReviewLikeAvgOrderByAggregateInput: ["userId", "movieReviewId"],
  MovieReviewLikeMaxOrderByAggregateInput: ["userId", "movieReviewId"],
  MovieReviewLikeMinOrderByAggregateInput: ["userId", "movieReviewId"],
  MovieReviewLikeSumOrderByAggregateInput: ["userId", "movieReviewId"],
  FollowsCreateNestedManyWithoutFollowingInput: ["create", "connectOrCreate", "createMany", "connect"],
  FollowsCreateNestedManyWithoutFollowerInput: ["create", "connectOrCreate", "createMany", "connect"],
  NotificationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  WatchlistCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
  MovieReviewCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  MovieReviewLikeCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
  BoolFieldUpdateOperationsInput: ["set"],
  StringFieldUpdateOperationsInput: ["set"],
  EnumRoleFieldUpdateOperationsInput: ["set"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  FollowsUpdateManyWithoutFollowingInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FollowsUpdateManyWithoutFollowerInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  NotificationUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  WatchlistUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  MovieReviewUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  MovieReviewLikeUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  UserCreateNestedOneWithoutFollowingInput: ["create", "connectOrCreate", "connect"],
  UserCreateNestedOneWithoutFollowersInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutFollowingInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserUpdateOneRequiredWithoutFollowersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  UserCreateNestedOneWithoutNotificationsInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneWithoutNotificationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  UserCreateNestedOneWithoutWatchlistInput: ["create", "connectOrCreate", "connect"],
  MovieCreateNestedManyWithoutWatchlistInput: ["create", "connectOrCreate", "connect"],
  ShowCreateNestedManyWithoutWatchlistInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutWatchlistInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  MovieUpdateManyWithoutWatchlistInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ShowUpdateManyWithoutWatchlistInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PersonCreatecareerInput: ["set"],
  ActorInMovieCreateNestedManyWithoutPersonInput: ["create", "connectOrCreate", "createMany", "connect"],
  ActorInShowCreateNestedManyWithoutPersonInput: ["create", "connectOrCreate", "createMany", "connect"],
  BookCreateNestedManyWithoutAuthorsInput: ["create", "connectOrCreate", "connect"],
  SongCreateNestedManyWithoutArtistsInput: ["create", "connectOrCreate", "connect"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  PersonUpdatecareerInput: ["set", "push"],
  ActorInMovieUpdateManyWithoutPersonInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ActorInShowUpdateManyWithoutPersonInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  BookUpdateManyWithoutAuthorsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SongUpdateManyWithoutArtistsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PersonCreateManycareerInput: ["set"],
  ActorInMovieCreateNestedManyWithoutMovieInput: ["create", "connectOrCreate", "createMany", "connect"],
  GenreCreateNestedManyWithoutMoviesInput: ["create", "connectOrCreate", "connect"],
  PlatformCreateNestedManyWithoutMoviesInput: ["create", "connectOrCreate", "connect"],
  SongInMovieCreateNestedManyWithoutMovieInput: ["create", "connectOrCreate", "createMany", "connect"],
  WatchlistCreateNestedManyWithoutMoviesInput: ["create", "connectOrCreate", "connect"],
  MovieReviewCreateNestedManyWithoutMovieInput: ["create", "connectOrCreate", "createMany", "connect"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  NullableFloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  ActorInMovieUpdateManyWithoutMovieInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GenreUpdateManyWithoutMoviesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PlatformUpdateManyWithoutMoviesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SongInMovieUpdateManyWithoutMovieInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  WatchlistUpdateManyWithoutMoviesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  MovieReviewUpdateManyWithoutMovieInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ActorInShowCreateNestedManyWithoutShowInput: ["create", "connectOrCreate", "createMany", "connect"],
  GenreCreateNestedManyWithoutShowsInput: ["create", "connectOrCreate", "connect"],
  PlatformCreateNestedManyWithoutShowsInput: ["create", "connectOrCreate", "connect"],
  SongInShowCreateNestedManyWithoutShowInput: ["create", "connectOrCreate", "createMany", "connect"],
  WatchlistCreateNestedManyWithoutShowsInput: ["create", "connectOrCreate", "connect"],
  ActorInShowUpdateManyWithoutShowInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GenreUpdateManyWithoutShowsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PlatformUpdateManyWithoutShowsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SongInShowUpdateManyWithoutShowInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  WatchlistUpdateManyWithoutShowsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ShowCreateNestedManyWithoutPlatformsInput: ["create", "connectOrCreate", "connect"],
  MovieCreateNestedManyWithoutPlatformsInput: ["create", "connectOrCreate", "connect"],
  ShowUpdateManyWithoutPlatformsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  MovieUpdateManyWithoutPlatformsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SongCreateNestedOneWithoutSongInMovieInput: ["create", "connectOrCreate", "connect"],
  MovieCreateNestedOneWithoutSoundtrackInput: ["create", "connectOrCreate", "connect"],
  SongUpdateOneRequiredWithoutSongInMovieInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  MovieUpdateOneRequiredWithoutSoundtrackInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  SongCreateNestedOneWithoutSongInShowInput: ["create", "connectOrCreate", "connect"],
  ShowCreateNestedOneWithoutSoundtrackInput: ["create", "connectOrCreate", "connect"],
  SongUpdateOneRequiredWithoutSongInShowInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ShowUpdateOneRequiredWithoutSoundtrackInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  MovieCreateNestedOneWithoutActorsInput: ["create", "connectOrCreate", "connect"],
  PersonCreateNestedOneWithoutMoviesInput: ["create", "connectOrCreate", "connect"],
  MovieUpdateOneRequiredWithoutActorsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  PersonUpdateOneRequiredWithoutMoviesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ShowCreateNestedOneWithoutActorsInput: ["create", "connectOrCreate", "connect"],
  PersonCreateNestedOneWithoutShowsInput: ["create", "connectOrCreate", "connect"],
  ShowUpdateOneRequiredWithoutActorsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  PersonUpdateOneRequiredWithoutShowsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  PersonCreateNestedManyWithoutBooksInput: ["create", "connectOrCreate", "connect"],
  GenreCreateNestedManyWithoutBooksInput: ["create", "connectOrCreate", "connect"],
  PersonUpdateManyWithoutBooksInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GenreUpdateManyWithoutBooksInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PersonCreateNestedManyWithoutSongsInput: ["create", "connectOrCreate", "connect"],
  SongInShowCreateNestedManyWithoutSongInput: ["create", "connectOrCreate", "createMany", "connect"],
  SongInMovieCreateNestedManyWithoutSongInput: ["create", "connectOrCreate", "createMany", "connect"],
  GenreCreateNestedManyWithoutSongsInput: ["create", "connectOrCreate", "connect"],
  PersonUpdateManyWithoutSongsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SongInShowUpdateManyWithoutSongInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SongInMovieUpdateManyWithoutSongInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  GenreUpdateManyWithoutSongsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  MovieCreateNestedManyWithoutGenresInput: ["create", "connectOrCreate", "connect"],
  ShowCreateNestedManyWithoutGenresInput: ["create", "connectOrCreate", "connect"],
  SongCreateNestedManyWithoutGenresInput: ["create", "connectOrCreate", "connect"],
  BookCreateNestedManyWithoutGenresInput: ["create", "connectOrCreate", "connect"],
  MovieUpdateManyWithoutGenresInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ShowUpdateManyWithoutGenresInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SongUpdateManyWithoutGenresInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  BookUpdateManyWithoutGenresInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  MovieReviewLikeCreateNestedManyWithoutMovieReviewInput: ["create", "connectOrCreate", "createMany", "connect"],
  UserCreateNestedOneWithoutMovieReviewsInput: ["create", "connectOrCreate", "connect"],
  MovieCreateNestedOneWithoutReviewInput: ["create", "connectOrCreate", "connect"],
  MovieReviewLikeUpdateManyWithoutMovieReviewInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  UserUpdateOneWithoutMovieReviewsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  MovieUpdateOneWithoutReviewInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  UserCreateNestedOneWithoutLikedMovieReviewsInput: ["create", "connectOrCreate", "connect"],
  MovieReviewCreateNestedOneWithoutLikesInput: ["create", "connectOrCreate", "connect"],
  UserUpdateOneRequiredWithoutLikedMovieReviewsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  MovieReviewUpdateOneRequiredWithoutLikesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolFilter: ["equals", "not"],
  NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedEnumRoleFilter: ["equals", "in", "notIn", "not"],
  NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedEnumRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedFloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  FollowsCreateWithoutFollowingInput: ["createdAt", "follower"],
  FollowsCreateOrConnectWithoutFollowingInput: ["where", "create"],
  FollowsCreateManyFollowingInputEnvelope: ["data", "skipDuplicates"],
  FollowsCreateWithoutFollowerInput: ["createdAt", "following"],
  FollowsCreateOrConnectWithoutFollowerInput: ["where", "create"],
  FollowsCreateManyFollowerInputEnvelope: ["data", "skipDuplicates"],
  NotificationCreateWithoutUserInput: ["message", "read", "createdAt"],
  NotificationCreateOrConnectWithoutUserInput: ["where", "create"],
  NotificationCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  WatchlistCreateWithoutUserInput: ["createdAt", "movies", "shows"],
  WatchlistCreateOrConnectWithoutUserInput: ["where", "create"],
  MovieReviewCreateWithoutUserInput: ["title", "review", "rating", "likes", "Movie"],
  MovieReviewCreateOrConnectWithoutUserInput: ["where", "create"],
  MovieReviewCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  MovieReviewLikeCreateWithoutUserInput: ["movieReview"],
  MovieReviewLikeCreateOrConnectWithoutUserInput: ["where", "create"],
  MovieReviewLikeCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
  FollowsUpsertWithWhereUniqueWithoutFollowingInput: ["where", "update", "create"],
  FollowsUpdateWithWhereUniqueWithoutFollowingInput: ["where", "data"],
  FollowsUpdateManyWithWhereWithoutFollowingInput: ["where", "data"],
  FollowsScalarWhereInput: ["AND", "OR", "NOT", "followingId", "followerId", "createdAt"],
  FollowsUpsertWithWhereUniqueWithoutFollowerInput: ["where", "update", "create"],
  FollowsUpdateWithWhereUniqueWithoutFollowerInput: ["where", "data"],
  FollowsUpdateManyWithWhereWithoutFollowerInput: ["where", "data"],
  NotificationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  NotificationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  NotificationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  NotificationScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "message", "read", "createdAt"],
  WatchlistUpsertWithoutUserInput: ["update", "create"],
  WatchlistUpdateWithoutUserInput: ["createdAt", "movies", "shows"],
  MovieReviewUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  MovieReviewUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  MovieReviewUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  MovieReviewScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "review", "rating", "userId", "movieId"],
  MovieReviewLikeUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
  MovieReviewLikeUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
  MovieReviewLikeUpdateManyWithWhereWithoutUserInput: ["where", "data"],
  MovieReviewLikeScalarWhereInput: ["AND", "OR", "NOT", "userId", "movieReviewId"],
  UserCreateWithoutFollowingInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "followers", "notifications", "watchlist", "movieReviews", "likedMovieReviews"],
  UserCreateOrConnectWithoutFollowingInput: ["where", "create"],
  UserCreateWithoutFollowersInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "notifications", "watchlist", "movieReviews", "likedMovieReviews"],
  UserCreateOrConnectWithoutFollowersInput: ["where", "create"],
  UserUpsertWithoutFollowingInput: ["update", "create"],
  UserUpdateWithoutFollowingInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "followers", "notifications", "watchlist", "movieReviews", "likedMovieReviews"],
  UserUpsertWithoutFollowersInput: ["update", "create"],
  UserUpdateWithoutFollowersInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "notifications", "watchlist", "movieReviews", "likedMovieReviews"],
  UserCreateWithoutNotificationsInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "watchlist", "movieReviews", "likedMovieReviews"],
  UserCreateOrConnectWithoutNotificationsInput: ["where", "create"],
  UserUpsertWithoutNotificationsInput: ["update", "create"],
  UserUpdateWithoutNotificationsInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "watchlist", "movieReviews", "likedMovieReviews"],
  UserCreateWithoutWatchlistInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "notifications", "movieReviews", "likedMovieReviews"],
  UserCreateOrConnectWithoutWatchlistInput: ["where", "create"],
  MovieCreateWithoutWatchlistInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack", "review"],
  MovieCreateOrConnectWithoutWatchlistInput: ["where", "create"],
  ShowCreateWithoutWatchlistInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack"],
  ShowCreateOrConnectWithoutWatchlistInput: ["where", "create"],
  UserUpsertWithoutWatchlistInput: ["update", "create"],
  UserUpdateWithoutWatchlistInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "notifications", "movieReviews", "likedMovieReviews"],
  MovieUpsertWithWhereUniqueWithoutWatchlistInput: ["where", "update", "create"],
  MovieUpdateWithWhereUniqueWithoutWatchlistInput: ["where", "data"],
  MovieUpdateManyWithWhereWithoutWatchlistInput: ["where", "data"],
  MovieScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt"],
  ShowUpsertWithWhereUniqueWithoutWatchlistInput: ["where", "update", "create"],
  ShowUpdateWithWhereUniqueWithoutWatchlistInput: ["where", "data"],
  ShowUpdateManyWithWhereWithoutWatchlistInput: ["where", "data"],
  ShowScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  ActorInMovieCreateWithoutPersonInput: ["role", "movie"],
  ActorInMovieCreateOrConnectWithoutPersonInput: ["where", "create"],
  ActorInMovieCreateManyPersonInputEnvelope: ["data", "skipDuplicates"],
  ActorInShowCreateWithoutPersonInput: ["role", "show"],
  ActorInShowCreateOrConnectWithoutPersonInput: ["where", "create"],
  ActorInShowCreateManyPersonInputEnvelope: ["data", "skipDuplicates"],
  BookCreateWithoutAuthorsInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "genres"],
  BookCreateOrConnectWithoutAuthorsInput: ["where", "create"],
  SongCreateWithoutArtistsInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "songInShow", "songInMovie", "genres"],
  SongCreateOrConnectWithoutArtistsInput: ["where", "create"],
  ActorInMovieUpsertWithWhereUniqueWithoutPersonInput: ["where", "update", "create"],
  ActorInMovieUpdateWithWhereUniqueWithoutPersonInput: ["where", "data"],
  ActorInMovieUpdateManyWithWhereWithoutPersonInput: ["where", "data"],
  ActorInMovieScalarWhereInput: ["AND", "OR", "NOT", "movieId", "personId", "role"],
  ActorInShowUpsertWithWhereUniqueWithoutPersonInput: ["where", "update", "create"],
  ActorInShowUpdateWithWhereUniqueWithoutPersonInput: ["where", "data"],
  ActorInShowUpdateManyWithWhereWithoutPersonInput: ["where", "data"],
  ActorInShowScalarWhereInput: ["AND", "OR", "NOT", "showId", "personId", "role"],
  BookUpsertWithWhereUniqueWithoutAuthorsInput: ["where", "update", "create"],
  BookUpdateWithWhereUniqueWithoutAuthorsInput: ["where", "data"],
  BookUpdateManyWithWhereWithoutAuthorsInput: ["where", "data"],
  BookScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt"],
  SongUpsertWithWhereUniqueWithoutArtistsInput: ["where", "update", "create"],
  SongUpdateWithWhereUniqueWithoutArtistsInput: ["where", "data"],
  SongUpdateManyWithWhereWithoutArtistsInput: ["where", "data"],
  SongScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "thumbnail", "locked", "released", "createdAt"],
  ActorInMovieCreateWithoutMovieInput: ["role", "person"],
  ActorInMovieCreateOrConnectWithoutMovieInput: ["where", "create"],
  ActorInMovieCreateManyMovieInputEnvelope: ["data", "skipDuplicates"],
  GenreCreateWithoutMoviesInput: ["name", "shows", "songs", "books"],
  GenreCreateOrConnectWithoutMoviesInput: ["where", "create"],
  PlatformCreateWithoutMoviesInput: ["name", "apiKey", "shows"],
  PlatformCreateOrConnectWithoutMoviesInput: ["where", "create"],
  SongInMovieCreateWithoutMovieInput: ["timestamp", "description", "song"],
  SongInMovieCreateOrConnectWithoutMovieInput: ["where", "create"],
  SongInMovieCreateManyMovieInputEnvelope: ["data", "skipDuplicates"],
  WatchlistCreateWithoutMoviesInput: ["createdAt", "user", "shows"],
  WatchlistCreateOrConnectWithoutMoviesInput: ["where", "create"],
  MovieReviewCreateWithoutMovieInput: ["title", "review", "rating", "likes", "User"],
  MovieReviewCreateOrConnectWithoutMovieInput: ["where", "create"],
  MovieReviewCreateManyMovieInputEnvelope: ["data", "skipDuplicates"],
  ActorInMovieUpsertWithWhereUniqueWithoutMovieInput: ["where", "update", "create"],
  ActorInMovieUpdateWithWhereUniqueWithoutMovieInput: ["where", "data"],
  ActorInMovieUpdateManyWithWhereWithoutMovieInput: ["where", "data"],
  GenreUpsertWithWhereUniqueWithoutMoviesInput: ["where", "update", "create"],
  GenreUpdateWithWhereUniqueWithoutMoviesInput: ["where", "data"],
  GenreUpdateManyWithWhereWithoutMoviesInput: ["where", "data"],
  GenreScalarWhereInput: ["AND", "OR", "NOT", "id", "name"],
  PlatformUpsertWithWhereUniqueWithoutMoviesInput: ["where", "update", "create"],
  PlatformUpdateWithWhereUniqueWithoutMoviesInput: ["where", "data"],
  PlatformUpdateManyWithWhereWithoutMoviesInput: ["where", "data"],
  PlatformScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "apiKey"],
  SongInMovieUpsertWithWhereUniqueWithoutMovieInput: ["where", "update", "create"],
  SongInMovieUpdateWithWhereUniqueWithoutMovieInput: ["where", "data"],
  SongInMovieUpdateManyWithWhereWithoutMovieInput: ["where", "data"],
  SongInMovieScalarWhereInput: ["AND", "OR", "NOT", "timestamp", "description", "songId", "movieId"],
  WatchlistUpsertWithWhereUniqueWithoutMoviesInput: ["where", "update", "create"],
  WatchlistUpdateWithWhereUniqueWithoutMoviesInput: ["where", "data"],
  WatchlistUpdateManyWithWhereWithoutMoviesInput: ["where", "data"],
  WatchlistScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "createdAt"],
  MovieReviewUpsertWithWhereUniqueWithoutMovieInput: ["where", "update", "create"],
  MovieReviewUpdateWithWhereUniqueWithoutMovieInput: ["where", "data"],
  MovieReviewUpdateManyWithWhereWithoutMovieInput: ["where", "data"],
  ActorInShowCreateWithoutShowInput: ["role", "person"],
  ActorInShowCreateOrConnectWithoutShowInput: ["where", "create"],
  ActorInShowCreateManyShowInputEnvelope: ["data", "skipDuplicates"],
  GenreCreateWithoutShowsInput: ["name", "movies", "songs", "books"],
  GenreCreateOrConnectWithoutShowsInput: ["where", "create"],
  PlatformCreateWithoutShowsInput: ["name", "apiKey", "movies"],
  PlatformCreateOrConnectWithoutShowsInput: ["where", "create"],
  SongInShowCreateWithoutShowInput: ["timestamp", "description", "song"],
  SongInShowCreateOrConnectWithoutShowInput: ["where", "create"],
  SongInShowCreateManyShowInputEnvelope: ["data", "skipDuplicates"],
  WatchlistCreateWithoutShowsInput: ["createdAt", "user", "movies"],
  WatchlistCreateOrConnectWithoutShowsInput: ["where", "create"],
  ActorInShowUpsertWithWhereUniqueWithoutShowInput: ["where", "update", "create"],
  ActorInShowUpdateWithWhereUniqueWithoutShowInput: ["where", "data"],
  ActorInShowUpdateManyWithWhereWithoutShowInput: ["where", "data"],
  GenreUpsertWithWhereUniqueWithoutShowsInput: ["where", "update", "create"],
  GenreUpdateWithWhereUniqueWithoutShowsInput: ["where", "data"],
  GenreUpdateManyWithWhereWithoutShowsInput: ["where", "data"],
  PlatformUpsertWithWhereUniqueWithoutShowsInput: ["where", "update", "create"],
  PlatformUpdateWithWhereUniqueWithoutShowsInput: ["where", "data"],
  PlatformUpdateManyWithWhereWithoutShowsInput: ["where", "data"],
  SongInShowUpsertWithWhereUniqueWithoutShowInput: ["where", "update", "create"],
  SongInShowUpdateWithWhereUniqueWithoutShowInput: ["where", "data"],
  SongInShowUpdateManyWithWhereWithoutShowInput: ["where", "data"],
  SongInShowScalarWhereInput: ["AND", "OR", "NOT", "timestamp", "description", "songId", "showId"],
  WatchlistUpsertWithWhereUniqueWithoutShowsInput: ["where", "update", "create"],
  WatchlistUpdateWithWhereUniqueWithoutShowsInput: ["where", "data"],
  WatchlistUpdateManyWithWhereWithoutShowsInput: ["where", "data"],
  ShowCreateWithoutPlatformsInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "genres", "soundtrack", "watchlist"],
  ShowCreateOrConnectWithoutPlatformsInput: ["where", "create"],
  MovieCreateWithoutPlatformsInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "soundtrack", "watchlist", "review"],
  MovieCreateOrConnectWithoutPlatformsInput: ["where", "create"],
  ShowUpsertWithWhereUniqueWithoutPlatformsInput: ["where", "update", "create"],
  ShowUpdateWithWhereUniqueWithoutPlatformsInput: ["where", "data"],
  ShowUpdateManyWithWhereWithoutPlatformsInput: ["where", "data"],
  MovieUpsertWithWhereUniqueWithoutPlatformsInput: ["where", "update", "create"],
  MovieUpdateWithWhereUniqueWithoutPlatformsInput: ["where", "data"],
  MovieUpdateManyWithWhereWithoutPlatformsInput: ["where", "data"],
  SongCreateWithoutSongInMovieInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "artists", "songInShow", "genres"],
  SongCreateOrConnectWithoutSongInMovieInput: ["where", "create"],
  MovieCreateWithoutSoundtrackInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "platforms", "watchlist", "review"],
  MovieCreateOrConnectWithoutSoundtrackInput: ["where", "create"],
  SongUpsertWithoutSongInMovieInput: ["update", "create"],
  SongUpdateWithoutSongInMovieInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "artists", "songInShow", "genres"],
  MovieUpsertWithoutSoundtrackInput: ["update", "create"],
  MovieUpdateWithoutSoundtrackInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "platforms", "watchlist", "review"],
  SongCreateWithoutSongInShowInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "artists", "songInMovie", "genres"],
  SongCreateOrConnectWithoutSongInShowInput: ["where", "create"],
  ShowCreateWithoutSoundtrackInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "genres", "platforms", "watchlist"],
  ShowCreateOrConnectWithoutSoundtrackInput: ["where", "create"],
  SongUpsertWithoutSongInShowInput: ["update", "create"],
  SongUpdateWithoutSongInShowInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "artists", "songInMovie", "genres"],
  ShowUpsertWithoutSoundtrackInput: ["update", "create"],
  ShowUpdateWithoutSoundtrackInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "genres", "platforms", "watchlist"],
  MovieCreateWithoutActorsInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "genres", "platforms", "soundtrack", "watchlist", "review"],
  MovieCreateOrConnectWithoutActorsInput: ["where", "create"],
  PersonCreateWithoutMoviesInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "shows", "books", "songs"],
  PersonCreateOrConnectWithoutMoviesInput: ["where", "create"],
  MovieUpsertWithoutActorsInput: ["update", "create"],
  MovieUpdateWithoutActorsInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "genres", "platforms", "soundtrack", "watchlist", "review"],
  PersonUpsertWithoutMoviesInput: ["update", "create"],
  PersonUpdateWithoutMoviesInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "shows", "books", "songs"],
  ShowCreateWithoutActorsInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "genres", "platforms", "soundtrack", "watchlist"],
  ShowCreateOrConnectWithoutActorsInput: ["where", "create"],
  PersonCreateWithoutShowsInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "movies", "books", "songs"],
  PersonCreateOrConnectWithoutShowsInput: ["where", "create"],
  ShowUpsertWithoutActorsInput: ["update", "create"],
  ShowUpdateWithoutActorsInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "genres", "platforms", "soundtrack", "watchlist"],
  PersonUpsertWithoutShowsInput: ["update", "create"],
  PersonUpdateWithoutShowsInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "movies", "books", "songs"],
  PersonCreateWithoutBooksInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "movies", "shows", "songs"],
  PersonCreateOrConnectWithoutBooksInput: ["where", "create"],
  GenreCreateWithoutBooksInput: ["name", "movies", "shows", "songs"],
  GenreCreateOrConnectWithoutBooksInput: ["where", "create"],
  PersonUpsertWithWhereUniqueWithoutBooksInput: ["where", "update", "create"],
  PersonUpdateWithWhereUniqueWithoutBooksInput: ["where", "data"],
  PersonUpdateManyWithWhereWithoutBooksInput: ["where", "data"],
  PersonScalarWhereInput: ["AND", "OR", "NOT", "id", "career", "name", "thumbnail", "bio", "age", "createdAt", "updatedAt"],
  GenreUpsertWithWhereUniqueWithoutBooksInput: ["where", "update", "create"],
  GenreUpdateWithWhereUniqueWithoutBooksInput: ["where", "data"],
  GenreUpdateManyWithWhereWithoutBooksInput: ["where", "data"],
  PersonCreateWithoutSongsInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "movies", "shows", "books"],
  PersonCreateOrConnectWithoutSongsInput: ["where", "create"],
  SongInShowCreateWithoutSongInput: ["timestamp", "description", "show"],
  SongInShowCreateOrConnectWithoutSongInput: ["where", "create"],
  SongInShowCreateManySongInputEnvelope: ["data", "skipDuplicates"],
  SongInMovieCreateWithoutSongInput: ["timestamp", "description", "movie"],
  SongInMovieCreateOrConnectWithoutSongInput: ["where", "create"],
  SongInMovieCreateManySongInputEnvelope: ["data", "skipDuplicates"],
  GenreCreateWithoutSongsInput: ["name", "movies", "shows", "books"],
  GenreCreateOrConnectWithoutSongsInput: ["where", "create"],
  PersonUpsertWithWhereUniqueWithoutSongsInput: ["where", "update", "create"],
  PersonUpdateWithWhereUniqueWithoutSongsInput: ["where", "data"],
  PersonUpdateManyWithWhereWithoutSongsInput: ["where", "data"],
  SongInShowUpsertWithWhereUniqueWithoutSongInput: ["where", "update", "create"],
  SongInShowUpdateWithWhereUniqueWithoutSongInput: ["where", "data"],
  SongInShowUpdateManyWithWhereWithoutSongInput: ["where", "data"],
  SongInMovieUpsertWithWhereUniqueWithoutSongInput: ["where", "update", "create"],
  SongInMovieUpdateWithWhereUniqueWithoutSongInput: ["where", "data"],
  SongInMovieUpdateManyWithWhereWithoutSongInput: ["where", "data"],
  GenreUpsertWithWhereUniqueWithoutSongsInput: ["where", "update", "create"],
  GenreUpdateWithWhereUniqueWithoutSongsInput: ["where", "data"],
  GenreUpdateManyWithWhereWithoutSongsInput: ["where", "data"],
  MovieCreateWithoutGenresInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "platforms", "soundtrack", "watchlist", "review"],
  MovieCreateOrConnectWithoutGenresInput: ["where", "create"],
  ShowCreateWithoutGenresInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "platforms", "soundtrack", "watchlist"],
  ShowCreateOrConnectWithoutGenresInput: ["where", "create"],
  SongCreateWithoutGenresInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "artists", "songInShow", "songInMovie"],
  SongCreateOrConnectWithoutGenresInput: ["where", "create"],
  BookCreateWithoutGenresInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "authors"],
  BookCreateOrConnectWithoutGenresInput: ["where", "create"],
  MovieUpsertWithWhereUniqueWithoutGenresInput: ["where", "update", "create"],
  MovieUpdateWithWhereUniqueWithoutGenresInput: ["where", "data"],
  MovieUpdateManyWithWhereWithoutGenresInput: ["where", "data"],
  ShowUpsertWithWhereUniqueWithoutGenresInput: ["where", "update", "create"],
  ShowUpdateWithWhereUniqueWithoutGenresInput: ["where", "data"],
  ShowUpdateManyWithWhereWithoutGenresInput: ["where", "data"],
  SongUpsertWithWhereUniqueWithoutGenresInput: ["where", "update", "create"],
  SongUpdateWithWhereUniqueWithoutGenresInput: ["where", "data"],
  SongUpdateManyWithWhereWithoutGenresInput: ["where", "data"],
  BookUpsertWithWhereUniqueWithoutGenresInput: ["where", "update", "create"],
  BookUpdateWithWhereUniqueWithoutGenresInput: ["where", "data"],
  BookUpdateManyWithWhereWithoutGenresInput: ["where", "data"],
  MovieReviewLikeCreateWithoutMovieReviewInput: ["user"],
  MovieReviewLikeCreateOrConnectWithoutMovieReviewInput: ["where", "create"],
  MovieReviewLikeCreateManyMovieReviewInputEnvelope: ["data", "skipDuplicates"],
  UserCreateWithoutMovieReviewsInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "notifications", "watchlist", "likedMovieReviews"],
  UserCreateOrConnectWithoutMovieReviewsInput: ["where", "create"],
  MovieCreateWithoutReviewInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack", "watchlist"],
  MovieCreateOrConnectWithoutReviewInput: ["where", "create"],
  MovieReviewLikeUpsertWithWhereUniqueWithoutMovieReviewInput: ["where", "update", "create"],
  MovieReviewLikeUpdateWithWhereUniqueWithoutMovieReviewInput: ["where", "data"],
  MovieReviewLikeUpdateManyWithWhereWithoutMovieReviewInput: ["where", "data"],
  UserUpsertWithoutMovieReviewsInput: ["update", "create"],
  UserUpdateWithoutMovieReviewsInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "notifications", "watchlist", "likedMovieReviews"],
  MovieUpsertWithoutReviewInput: ["update", "create"],
  MovieUpdateWithoutReviewInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack", "watchlist"],
  UserCreateWithoutLikedMovieReviewsInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "notifications", "watchlist", "movieReviews"],
  UserCreateOrConnectWithoutLikedMovieReviewsInput: ["where", "create"],
  MovieReviewCreateWithoutLikesInput: ["title", "review", "rating", "User", "Movie"],
  MovieReviewCreateOrConnectWithoutLikesInput: ["where", "create"],
  UserUpsertWithoutLikedMovieReviewsInput: ["update", "create"],
  UserUpdateWithoutLikedMovieReviewsInput: ["confirmed", "email", "username", "displayname", "password", "role", "avatar", "bio", "location", "website", "dob", "createdAt", "updatedAt", "following", "followers", "notifications", "watchlist", "movieReviews"],
  MovieReviewUpsertWithoutLikesInput: ["update", "create"],
  MovieReviewUpdateWithoutLikesInput: ["title", "review", "rating", "User", "Movie"],
  FollowsCreateManyFollowingInput: ["followerId", "createdAt"],
  FollowsCreateManyFollowerInput: ["followingId", "createdAt"],
  NotificationCreateManyUserInput: ["id", "message", "read", "createdAt"],
  MovieReviewCreateManyUserInput: ["id", "title", "review", "rating", "movieId"],
  MovieReviewLikeCreateManyUserInput: ["movieReviewId"],
  FollowsUpdateWithoutFollowingInput: ["createdAt", "follower"],
  FollowsUpdateWithoutFollowerInput: ["createdAt", "following"],
  NotificationUpdateWithoutUserInput: ["message", "read", "createdAt"],
  MovieReviewUpdateWithoutUserInput: ["title", "review", "rating", "likes", "Movie"],
  MovieReviewLikeUpdateWithoutUserInput: ["movieReview"],
  MovieUpdateWithoutWatchlistInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack", "review"],
  ShowUpdateWithoutWatchlistInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "genres", "platforms", "soundtrack"],
  ActorInMovieCreateManyPersonInput: ["movieId", "role"],
  ActorInShowCreateManyPersonInput: ["showId", "role"],
  ActorInMovieUpdateWithoutPersonInput: ["role", "movie"],
  ActorInShowUpdateWithoutPersonInput: ["role", "show"],
  BookUpdateWithoutAuthorsInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "genres"],
  SongUpdateWithoutArtistsInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "songInShow", "songInMovie", "genres"],
  ActorInMovieCreateManyMovieInput: ["personId", "role"],
  SongInMovieCreateManyMovieInput: ["timestamp", "description", "songId"],
  MovieReviewCreateManyMovieInput: ["id", "title", "review", "rating", "userId"],
  ActorInMovieUpdateWithoutMovieInput: ["role", "person"],
  GenreUpdateWithoutMoviesInput: ["name", "shows", "songs", "books"],
  PlatformUpdateWithoutMoviesInput: ["name", "apiKey", "shows"],
  SongInMovieUpdateWithoutMovieInput: ["timestamp", "description", "song"],
  WatchlistUpdateWithoutMoviesInput: ["createdAt", "user", "shows"],
  MovieReviewUpdateWithoutMovieInput: ["title", "review", "rating", "likes", "User"],
  ActorInShowCreateManyShowInput: ["personId", "role"],
  SongInShowCreateManyShowInput: ["timestamp", "description", "songId"],
  ActorInShowUpdateWithoutShowInput: ["role", "person"],
  GenreUpdateWithoutShowsInput: ["name", "movies", "songs", "books"],
  PlatformUpdateWithoutShowsInput: ["name", "apiKey", "movies"],
  SongInShowUpdateWithoutShowInput: ["timestamp", "description", "song"],
  WatchlistUpdateWithoutShowsInput: ["createdAt", "user", "movies"],
  ShowUpdateWithoutPlatformsInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "genres", "soundtrack", "watchlist"],
  MovieUpdateWithoutPlatformsInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "genres", "soundtrack", "watchlist", "review"],
  PersonUpdateWithoutBooksInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "movies", "shows", "songs"],
  GenreUpdateWithoutBooksInput: ["name", "movies", "shows", "songs"],
  SongInShowCreateManySongInput: ["timestamp", "description", "showId"],
  SongInMovieCreateManySongInput: ["timestamp", "description", "movieId"],
  PersonUpdateWithoutSongsInput: ["name", "thumbnail", "bio", "age", "createdAt", "updatedAt", "career", "movies", "shows", "books"],
  SongInShowUpdateWithoutSongInput: ["timestamp", "description", "show"],
  SongInMovieUpdateWithoutSongInput: ["timestamp", "description", "movie"],
  GenreUpdateWithoutSongsInput: ["name", "movies", "shows", "books"],
  MovieUpdateWithoutGenresInput: ["title", "overview", "thumbnail", "locked", "released", "status", "runtime", "revenue", "trailer", "rating", "createdAt", "updatedAt", "actors", "platforms", "soundtrack", "watchlist", "review"],
  ShowUpdateWithoutGenresInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "actors", "platforms", "soundtrack", "watchlist"],
  SongUpdateWithoutGenresInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "artists", "songInShow", "songInMovie"],
  BookUpdateWithoutGenresInput: ["title", "description", "thumbnail", "locked", "released", "createdAt", "updatedAt", "authors"],
  MovieReviewLikeCreateManyMovieReviewInput: ["userId"],
  MovieReviewLikeUpdateWithoutMovieReviewInput: ["user"]
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<
  TInput extends InputTypesNames
  > = FieldsConfig<InputTypeFieldNames<TInput>>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName = inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}

